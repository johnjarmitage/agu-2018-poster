%!PS-Adobe-3.1 EPSF-3.0%%Title: Logo IPG.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: dyon%%CreationDate: 6/04/05%%BoundingBox: 0 0 149 216%%HiResBoundingBox: 0 0 148.0069 215.9488%%CropBox: 0 0 148.0069 215.9488%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %AI7_Thumbnail: 88 128 8%%BeginData: 13280 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2DFF292907A9FD08FF84A9A9FD48FF7E29010701A9FD06FF84A9%84A9FD49FF0129072953FD06FFA984A9A8FD48FFA92F01070129FD05FFA9%29297EAFFD48FFA97E29072902FD05FF0729027EAFFD48FF84A907290107%7EFFFFFF5329010759FD4AFF84530129075AFFFFFF29012907A9FD49FFA8%A95307010729FFFFFF01070129A8FD4AFFA98502290729FFFFA82902292F%FD4CFF8429012901FFFFA90107015AA9FD4BFFA92F290129A8FF5A290729%5AFD4CFFA87E010701A9FF7E01070184FD4DFF84290229A8FF54290729A8%FD32FFA8847E84FD087E537EA8FD0BFFA8A9290701A9FF53012907A9FD2F%FF84A853A9A9A97E847EAF84847EA2A1CAC9A17DA8A8FD09FF84540729A8%FF2F29012FA9FD2DFF847EAFFD057EA9A8AF5A7DA7C9C2C2A0CAC9C9A77D%7DA9FD06FF84A9530701A8FF53010729AFFD22FFA97E7E5A7E7E7E5A7E54%7EA9847EA9A9AFA9AFA9AFA8A97DCABBBAB4BAB4C2C9CAA1CAA1A27E7E5A%7E7EA97E540729537E29290230A9FD22FF29A9A8A87EA9A87E7EAF7E7E9A%BBB4B492B4B4A05A7E5A53A19A6E9392B4B4BA99A1C3C9C9A87DA87EA984%A85329017E7E2F01072FAFFD22FF53FD05FFA97E7E53C9B4B4B4BAB4B4B4%BA99845A7EA1CABBBAB4936F93B493B4BABAC2C3CA7DFFA8A9FF7E0129FF%FF29290754A8FD22FF29FD04FF847E7E84A9A1BA92B492B492B492B4767E%A1CAC9BB92B492B492936FB492B492B499C9A1A884FF530701FFFF2F0107%2FAFFD22FF54FFFFFFA8A8A9A9AFA9AF7EA099BAB4BAB4BA9376A1A2A1C2%B4BAB4BAB4BA93BA929992BAB4BAB4C984AFFF5A022FFFFF2F290754A9FD%22FF29FFFF847E7EA8AFA8845A7E5A7E5AA099764C7E7EC9A7A2769292C2%B4B46EB4B4B492936EB492B499A97DA9290729FFFF53012953AFFD22FF54%FF7E7ECAA1FFA8A85A845A845A5A53FD045A84A8845AA8A1A1A0BA93B4B4%BAB4B4B4BA93B4B4A184A1A129077EFFFF2F290154A9FD22FF29847DC9A7%A17DC9A77E5A5A2F5A597E5A7E5A5A53847DA8A0C299936FB492B492B492%B492B492927DA192A101077EFFFF5301072FAFFD22FF54A1CAC9CAA1CAA1%7E54FD045A845A855A845AA2C9CAC3BAB4BA6FBB93BAB4BAB4BAB4BAB4BA%93A99ABA6F2907A9FFFF2F29025AA9FD22FF77CAC9C97DCAC9C97D845A7E%5A5A5A7E5A7E5A7EA1A1C9C292936EB492B46EB492B4B4B492B4B4A08470%B44C0129A2FFFF5401072FA9FD21FFA8CAC9CA9AC2C2CAA1CAA1845A8453%845A845A845ACAA1A8C29392BAB4B4B4BA9393B4BAB4B4B4BAA8A1929328%2929A2FFFF2929075484FD21FFA1C9C2929392BBA7A1C9A85A7E5A5A5A7E%5A7E5A84A7C9779A92B492B492BA92B4929292B492B492A976B492070153%A7A2FF7E01072FA8FD20FFA8C9C2B499B4BAB4CAA1CAA7855A8453855A84%5ACAA1A29ABA93BAB4BAB4BB767E99BA92BBB4BAB4A184B5B47007296FCA%A1FF5A29075484FD20FF6FB4B4B46EB4B4B499A1C97E5A7E5A5A5A7E5A5A%77CAC9C9A0BB6EB492B4B4BB7D8476B46EB4B4B47EA1B4B4222901B499CA%7E7E012929A9A8FD1EFFA1B46FB593B4B4BAB49399845A845A84535A535A%5AA8C9CAC9C2B4B592C1C2C2C1C9C9A8B4B46FBA99A999BAB429014C93BA%C97EA829012F84FD1FFF9A92B4926F6EB492B46FA72F5A535A2F545A7E5A%7E5ACAA7CA98B49293A1C9A7CAC2BB92B492B46EA87DB4926F01076EB49A%C95384010729A9A8FD1EFF93BAB4BB93BA6F99937D7D855A845A8554845A%855A84A7CAC9C9BBBB765A7EC2B4BAB4BAB4BAB49A84A1B4BA4C2906C2C9%A2C9A87E29022984AFFD1DFFA1B4B4B46EB4B4B492C97D7E5A7E5A7E5A5A%5A7E5A7E5ACAC9CAC9A85A7E529992B4B4B492B4B4927CA992B49229014D%C9CA7DC97E840707018584FD1DFFA1B4BAB493B4BAB4B4C2A25A845A845A%84537E5A845A847ECAC9CA7EA092BA93B4B4BAB4B4B49399A9A8A1C17001%29A1CAC9CA77AF7E5407295AA9FD1DFF6FB492B46EB492B498C9777E5A7E%5A7E5A7E2F7E5A7E5A7E5A7E7D9992B4929392B492B49293A0A884CA77CA%280701CAC984A177A8842F0701547EFD1DFF9AB4BA92B5B4BAB4C2C97E5A%845A855A845A5A5A845A855A845AA8B4BAB4BAB493B4BA9393C2CA84A9C9%CA7D29027EC9845AA954AFA97E07292FA9A9FD1CFF6EB49293B4B492B4BB%C977845A7E5A7E5A7E2F7E5A7E5A7E7ECAC9B4B4B492B492926EB4B4B47D%A97EA8A1530107A1A85A7E537EA8A95329012984AFFD1CFF93B4B46FBAB4%B4B4BBC9A1A7845A845A845A5A5A845A847ECAC9CABBBAB4B492936FB4B4%BAB4A884845A7E072953CAC9845A5A7EAFA984012907A984FD1CFF45B492%9392B492B492CA7DA85A7E5A7E5A7E5A5A5A7E5AA8A7CAC9C992B46E9392%9392B492A184A0767E2F07015AA7C97D5A5A7EA8AF7E2901075AA8A8FD1B%FF9393BA6FBABAC2BBC9C97E5A855A845A855A8453855A84C9CAC9CAA7A1%93BAB4BAB493B4BB84A8B4BB5A2902295A847E8454847EAFA9A929290754%84FD1CFF6EB46E6F92C1C9A85A7E537E5A7E5A7E5A7E5A5A5A7E7EC9C9CA%7DA1C9C9BBB492B46EB47DA999B492540107297E5A7E537E5A7EA8AF7E53%012929A9A8FD1BFF93B4BA6F9399CAA8845A5A5A845A845A845A845A5A5A%7E7DA1A1CAC9CAC9CAC9C2B4BA93A799BAB4B42929075A5A845A5A5A847E%AFA8A95429012984A9FD1BFF6EB4929392C9769A5253297E5A7E5A7E5A5A%2F5A2F5A537E7DC9A7CAC9C9A7CAC9BB929392B492B46E07012FFD055A7E%5A7EA8A97E7E0707017E84FD1BFFA1BBBA93BBC2C1B4BAB4767D5A535A54%5A5A855A5A5A855A847EA8C9CAC9CAC9CAC2BA9293B4BAB44C02295A8453%7E5A845A857EAFA8A97E54022953A9AFFD1AFF7DC99993B4B492B4B4B46E%BBC2CA7D7E5A7E5A7E5A5A5A7E5A7E5AA8C9C9C9CAC9C992B46EB4929301%0728A07D53537E5A7E7E7EA87EFF7E5A07012984A9FD1AFFA8C9CA6FBAB4%B4B4BAB49392BBC9CA7E845A845A8454845A845A845AA8C9CAC9CAC9C2B4%93B4B44C290799B4BB52845A845AA97EAF7EFF5AA9072901A9A8FD1BFFA1%C29392B492B492B4929392C2C9C9597E5A7E5A5A5A7E5A7E5A7E5AA8A7C9%A7CAC3C192999307012F75B46E765A7E5A7E7EA9A8A8FF7E7E54010753A9%A9FD1AFF77C26FBAB4BAB4BAB4BA6FBABBCAC9CA5A845A855A5A5A855A84%5A855A84C9CAC9CAC9CAA15302295A7D92BA93A05A857E84A9A97EFF5AA9%7E29025484FD1BFFA8769292B4B4B492B4B49392BAC9C9C9845A7E5A7E53%5A5A7E5A7E5A7E5ACAC9CAC9C9C97701074D7E539992937D7E5A847EA953%FFFF7E7EFF010701A984FD1AFFA97E9993B4BAB4B4B4BAB493B4C1C9CA7E%845A845A8454845A845A845A847ECAC9CAC9CA2929077DA7849AB452845A%8484847E84FFFF7EA9FF5407295AA9FD1BFF7E7E6FB492B492B492B46EB4%92C9C9A85A7E5A7E5A5A5A7E5A7E5A7E5A7EA1C9A7CA7D070153C9845AB4%92765A7E5A847E7EA8FFFF7E84FF7E07012F7EAFFD1BFF84A86FBAB4BAB4%BAB4BA6FBAB4C2C9845A845A855A5A5A855A845A855AA8C9CAC9290229A1%CA5A85B4BB76855AA97E847EFFFFFF7EA9FFFF072907A9A8FD1BFFA8A87E%6FB4B4B492B4B49392B4B4BAA07E5A7E5A7E5A5A5A7E5A7E5A7E5AA87D77%010728CAC97E5A7D6F9A5A84A85A7EFD04FF7EA8FFFF54010753A9AFFD1A%FFA984A97E76BBB4B4B4BAB493B4BAB4B4B4BB76845A8454845A845A8453%5A5A84072907A27DCA5A845A5A5A84A87E84A8FD04FF5AA9FFFF7E290753%84FD1CFF29A9A87E769392B492B4929392B492B492B4927E5A7E535A2F5A%537E5A7E2907012F5A5A7D7E5A7E2F7E8484597EFD05FF7E7EFFFFFF0107%018484FD1BFF547EAFA8A8BBB56F99939392BBB4BAB49993936F5A545A5A%855A845A855A2902295A8453855A845A5A8484A87EA9FD05FF5AA9FFFFFF%7E072953A9AFFD1AFF29FF7EA984A8BBC199B492936F936E9392B4B4B47D%845A5A5A7E5A7E5A2F0107297E5A5A5A7E5A7E537EA87E7EFD06FF7E7EFF%FFFF7E29012F84AFFD1AFF53FFFF84AFA8A8C9CAC2C2BBBB6FC1C2C9C3C2%BBC9C9CA7E5A5A845A5A0129077E5A8454845A84547EA8AF7EFD07FF7EA9%FD04FF072907A984FD1AFF29FFFFA97EA984A2C9C9A7CAC9C977C9C9C9A7%CAC9C9A7CA7D5A5A7E0707012F5A7E5A5A5A7E597EA8A97EFD08FF7E84FD%04FF5A010753A8A8FD19FF54FD04FF7EAFA9A2A7CAC9CAC9CAA1CAC9CAC9%CAC9CAC9CAA1A8532902295A845A85547E7EAF7EA97EFD09FF7EA9FD04FF%A829072984AFFD19FF29FD05FF7EAFA8847DCAC9C9C9CAA1A1C9CAC9C9C9%CAC9C9772901072F7E5A7E535A84A9A87E84FD0AFF7EA8FD05FF2929017E%84FD19FF54FD06FF7EA9A9A97DCAC9CAC9CAA1A2A7A8A8A8A7CAC92F0129%29845A7E7EAF7EAFA97EA8FD0BFF5AA9FD05FF7E012953A9A8FD18FF29FD%07FFA88484A97E7EA8A8A8AF847E7E845A7E5A5A010701545AA9A8AFA87E%7EA8FD0DFF7E7EFD05FFA907012984A9A8FD17FF54FD09FFA853FD047EAF%A9AFA9A97E847E7E292902547EAFA9AFA9A97EFD0FFF5AA9FD06FF532907%7E84FD18FF29FD0BFF84847E7E535A7E7E7EA97EA8532901297EA97EA97E%A8A9FD10FF7E7EFD06FFA9012929A984FD17FF53FD0EFF84A87E7E7E84A8%AF7E29012953847E7EA8FD13FF7EA9FD07FF2901297EA9A9FD16FF29FD12%FFA87E7E7E29010706A9FD17FF7E84FD07FF7E07015484A9FD16FF54FD15%FF84072902A9FD18FF7EA9FD08FF072929A984FD16FF29FD14FFAF062901%53FD19FF7EA8FD08FF54012953A984FD15FF54FD14FF2F290129A9FD13FF%A9AFA8AFA8AF7EA9A9FD07FFA929012F84A9A8FD14FF29FD13FF5A070107%53FD0BFFA8A9537E53532F532F5A5AA87EA984A87EA984A8A8FD05FF2907%017E84A9A8FD13FF54FD12FFA829072929FD09FF847E2929072902290729%0229072902545AA984A984A984A984AFFFFFFFA902292FA984FD14FF29FD%11FFA92F012901A9FD06FFA85A07290107012FFD04290107012901070129%012953AFA8A984A984A9A8FFFF2901297EA984FD13FF53FD11FF7E072901%A9FD06FF53290729537EA8FFA8A9A8FFFFFF7E5A0729072901290729015A%A9AF84A984A9A8FF7E29015484A9A8FD12FF29FD11FFA85453A8FD04FFA8%540107077EA9FFFFFF84A884FD07FF7E54010701070107010753A984A984%A884FF2907018484A8A8FD11FF54FD18FF5A290754A8FD05FFA8A9A9FD0B%FF5329072902290729077EA9A984A9847E02292FA984AFFD11FF29FD16FF%A929070684FD06FF84A9A9FD0DFFA82F010701290107012F84A984A97E29%01297EA984AFFD10FF54FD15FF7E012954FD07FF84A9A9FD0FFF5AA92F29%0129072901295AA984A95329015484A984FD10FF29FD13FFA82F01297EFD%06FFAF7EA9A8FD10FF7E7EFF7E2901070107010729847E840107018484A8%84FD0FFF54FD12FF7E290753A9FD07FF84A9A9FD11FF5AA9FFFFFF540729%0229072907858454022929A984A9AFFD0EFF29FD11FF7E07015AA9FD07FF%84A984FD12FF7E7EFD04FFA9070701290107015A842901295AA984A9FD0E%FF53FD10FF5329075AFD08FF84A984FD13FF7EA9FD06FF2F290129072901%7E5429012984A984AFFD0DFF29FD0FFF5307017EFD08FFA8A87EFD14FF7E%84FD07FF530701070107015A0707015A84A87EFD0DFF54FD0EFF542902A9%FD08FFAFA984FD15FF7EA9FD08FF7E29072902290754022907A984A9A8FD%0CFF29FD0DFF5329015AFD09FFA984A9FD15FF7EA8FD09FFA82901070129%0129012953A984A9A8FD0BFF54FD0CFF5329015AFD0AFF84A9FD16FF5AA9%FD0AFFA95407290129072901297EA984A9AFFD0AFF29FD0BFF5A07012FFD%0AFFA8A8A8FD16FF7E7EFD0BFFA82F010701070107012984A87EA9FD0AFF%54FD0AFF7E290729FD0CFFA8FD17FF5AA9FD0DFF53022907290729077E84%A984AFFD09FF29FD09FFA82901297EFD24FF7E7EFD0DFFA92F0129010701%29078484A984FD09FF53FD08FFA92F072953FD25FF7EA9FD0FFF29012907%2901292FA984A984FD08FF29FD08FF53010707A9FD25FF7E84FD0FFFA829%0107010701075AA87EA984FD07FF54FD07FFA80229077EFD26FF7EA9FD10%FF7E2907290229072984A984A9A9FD06FF29FD07FF0707012FFD27FF7EA8%FD11FF532901070129015384A984A9A8FD05FF54FD06FF29290729A8FD27%FF5AA9FD12FF2929072901290784A8A984A9FD05FF29FD05FF7E0701072F%FD28FF7E7EFD13FF29072F54010707FFA8AFA8A9FD04FF54FD05FF290229%07FD29FF5AA9FD17FF5407292FFD08FF29FD04FFA92929017EFD29FF7E7E%FD17FFA854010753FD07FF53FD04FFA9FFA929A9FD29FF7EA9FD19FFA953%297EFD06FF29FFFFFFA82901A9A8FD2AFF7E84FD1CFFA9FD06FF54FFFFFF%7E012929FD2BFF7EA9FD23FF29FD04FF5401A9FD2BFF7EA8FD23FF54FD04%FFA8A8A8FFFFFFA8A9A8A9A8A9A8FD08FFA9A8A9A8A9A8FD08FFA9A8A9A8%A9A8A9A8FFFFFF5AA9FD23FF29FFFFFF53070107FFFF5307010701070107%015AFFFFFFA9532901070107010701072FA8FD04FF010701070107010701%A9FF7E7EFD23FF54FFFFFF7E072901FFFF7E012907542F2F072901A9FFA8%01290729297E7E5A292907290154FFFFFF29072907542F29012929FF5AA9%FD23FF29FFFFFF53290107FFFF5A070129FFFFFF2F010753A9010701297E%FD05FFA854010729A9FFFF01290153FFFFA8070129A87E7EFD23FF53FFFF%FF7E012907FFFF7E072901FFFFFF2929077E5A2907295AFD08FFA9A9FD04%FF2901292FFFFF7E072901FF7EA9FD23FF29FFFFFF53070107FFFF530701%07010701070129A87E010701A8FFFFFF7E0107010701070107FFFF010701%0701070107012FFF7E84FD23FF54FFFFFF7E012907FFFF7E072901542F54%2F7EA9FF7E29072929FFFFFF5A2907290129072953FFFF29012929542F54%2F7EFFFF7EA9FD23FF29FFFFFF5A070129FFFF53290107FD08FF29290107%2984A9FFFFFF2F07012907FFFFFF01070153FD07FF7EA8FD23FF54FFFFFF%7E072901FFFF7E012907FD09FF2F290729012907290129072929FD04FF29%072929FD07FF5AA9FD23FF29FFFFFF53070107FFFF53070107FD0AFFA87E%292901070107295AA8FD05FF0107012FFD07FF7E7EFD23FF54FD32FF5AA9%FD23FF29A9A8A87EA9A8A87EA9A8A87EA9A8A87EA9A8A87EA9A8A87EA9A8%A87EA9A8A87EA9A8A87EA9A8A87EA9A8A87EA9A8A87EA9A8547EFD23FF84%5A7E7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E%7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E7E7E5A7E7EFD7CFF545A7EA8A97E%54A95329A97E54077E2FA95A5429A8FFA92954FF292FAFFF7E297E5AA92F%5AA854FF2FA87EA8A953FF2FFF2F7E297EFD23FF297E06A9A8297EA9A87E%7E7EFF53FF54A87EFF54FFFF7E7E29A929FFFFFF5384297E7E547E535354%7EA853A953A97E54FF5353A9FD24FF547E2F53A9542FA9A97EA95AFF2FFF%29A97EFF29FFFFA95A7EA82929FFFF7E077E7E2F07FF29A97E2F7E7EA87E%A87E29FF2F7E29A9FD23FF297E7E297E7E537E7E7E847EFF53FF2F7E7EFF%2FFFFF847E53A929FFFFFF53A8FF7E842FFF53FF7E7E5353A8297E7E2FFF%5353A8FD24FF547EA929A929297EA97EA95AFF2FFF29547EFF2FFFFFA929%54FF292FFFFF7EA8FF7EA92FFF2FFF5329537EA829075A537E547E297EFD%23FFA8FFA9AFA8FFA8FFA8FFA9AFFFA9FFFF7EFFFFA9FFFFA9A9FFFFA8A9%A8FFA8FFFFFFA9A9FFA9FFFF7EFFA8FFFFA9A8FF7EFFA8A9A8FD34FFA8FD%21FFA9FD23FFA92929A87E847E7EFFFFFF2953FF2FFFFF7E54A8A92929A8%7E297EFFFF842929FF53297EFFFFA80729FFA901FF842929FF29FFA829A8%FD22FFA87E53A97EA95AA9FFFF53FF7EFF2FFFFF54A884A87E29FF7EA9FF%FFFFA95A54A87EA8FFFFFFA87E29FF7E2FA9A95A54A954FF547EA9FD22FF%A95AA9537EA87E7EFFFF537E7EFF53FFFF29A953A9072FFF7E297EFFFFA8%7E53A95A2F7EFFFFA90154FF537E7EA82929FF29FFA8297EFD22FFA87E7E%A95AA953FFFFFF2FFF5AFF2FFFFF54A87EA87E2FA95AA9FFFFFFA97E7EA8%7EA8FFFFFFA87EFFFF295453A97E7EA854FF7EA854FD22FFA80754A8A807%29FFFFFF7E2954FF2929A929297EA80729A87E297EFFFF7E2953FF532F7E%FFFFA953FFA854FF297E7E53A829FF2F0753FD1EFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Logo IPG.eps) 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -215.949 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 215.949 li148.007 215.949 li148.007 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"1.46964 lw0 lc0 lj4 ml[] 0 dshtrue sadj94.2422 192.491 mo94.2422 28.6307 li7.78077 28.6307 li7.78077 192.491 li94.2422 192.491 licpfalse sop1 0.8 0 0.03 cmyks45.9903 113.543 mo71.2418 113.543 91.7134 93.0718 91.7134 67.8199 cv91.7134 42.5679 71.2418 22.0967 45.9903 22.0967 cv20.7383 22.0967 0.26709 42.5679 0.26709 67.8199 cv0.26709 93.0718 20.7383 113.543 45.9903 113.543 cv0.2 0.0500001 0 0 cmykf16.8433 43.0816 mo23.2115 34.0191 33.9883 28.1407 48.9292 28.3855 cv63.8702 28.6307 84.4444 57.7774 84.4444 57.7774 cv86.1592 65.1253 90.0782 91.5777 64.3599 104.315 cv52.3584 107.744 51.1338 111.418 27.375 102.355 cv3.61719 93.2925 16.8433 43.0816 16.8433 43.0816 cv0.5 0.2 0 0 cmykf88.6084 51.6543 mo88.4151 54.9424 87.1866 58.0696 86.2818 61.084 cv85.2129 60.4793 85.2002 59.0264 84.2535 58.5171 cv83.7334 58.2371 83.6988 59.2811 83.2935 59.5362 cv82.1993 60.2252 80.9747 60.8018 80.3663 61.7127 cv79.0508 63.6827 82.7681 66.5357 81.0669 67.8499 cv80.1646 68.5472 79.2579 67.5911 78.5264 67.0874 cv76.709 65.8372 75.4273 64.1717 73.48 63.4678 cv72.023 62.9412 70.1495 63.6385 68.7178 62.9044 cv68.0411 62.5572 67.2798 62.1705 66.5918 61.7193 cv65.629 61.0892 64.4634 62.2486 63.2666 62.0176 cv61.8975 61.753 60.9571 60.7847 59.8292 60.1043 cv59.9351 62.0059 60.4229 63.7989 61.3819 65.4441 cv63.5987 69.2478 65.9976 72.6607 67.772 76.5777 cv68.4737 78.1275 68.3165 80.0933 69.0899 81.5523 cv69.8052 82.9009 70.1456 84.3013 70.3609 85.8223 cv70.1978 85.8223 70.0347 85.8223 69.8711 85.8223 cv69.9493 86.5328 69.293 86.9078 69.1358 87.5367 cv68.6602 89.441 69.2261 91.3277 68.6465 93.1705 cv67.3252 92.6871 66.1104 92.9283 64.9913 91.6539 cv64.1446 90.69 63.0328 92.148 61.7461 92.543 cv60.418 92.9502 59.0865 91.1871 57.6246 91.2105 cv56.7569 91.2247 56.3799 90.0074 55.6651 89.2515 cv54.1392 87.6373 55.1544 84.1773 52.5406 83.4136 cv52.3619 83.3609 52.667 82.2242 52.3877 81.7085 cv51.7432 80.5181 50.292 80.0655 49.419 79.0987 cv48.1045 77.6426 46.8682 76.3165 45.316 75.126 cv43.9834 74.1036 42.419 73.7974 40.9776 72.8282 cv39.5562 71.8728 38.3438 70.6629 38.8311 68.9405 cv39.0054 68.325 39.2198 67.8809 39.3404 67.223 cv39.6836 65.3604 41.3545 64.3502 42.6045 63.2288 cv43.8653 62.0987 46.0772 62.2737 47.4551 61.1702 cv48.4947 60.3377 49.4986 59.3335 50.7891 58.9581 cv52.3072 58.5164 53.8799 58.4024 55.3736 57.98 cv58.6036 57.0665 61.7652 55.6089 63.9893 53.2562 cv66.2134 50.9039 63.6207 47.3672 60.9932 46.0164 cv59.1172 45.0518 57.1524 44.2366 54.9415 44.7256 cv53.5777 45.0274 52.1866 46.1968 52.626 47.566 cv53.2832 49.6124 55.9336 49.4778 57.8204 49.9964 cv59.4082 50.4329 62.1104 51.3963 61.3897 53.4366 cv61.2212 53.9131 60.8902 54.6661 60.2979 54.9109 cv58.3502 55.7164 56.335 57.1644 54.2564 56.0694 cv53.5835 55.7149 53.628 54.8128 53.7056 53.981 cv53.542 53.981 53.2881 54.0215 53.2618 53.961 cv52.5352 52.3113 50.502 51.576 49.1573 52.6443 cv48.1851 53.4166 47.3584 54.4214 46.71 55.5145 cv45.9019 56.878 46.1841 58.775 44.796 59.7252 cv43.5713 60.563 42.5694 58.9498 41.2354 58.743 cv39.876 58.5325 39.0469 57.077 38.961 55.9258 cv38.9151 55.3045 39.7364 54.5564 39.9439 53.7249 cv40.2544 52.4822 38.7632 51.7647 37.8541 51.3716 cv36.586 50.8233 37.4551 49.0652 37.7198 47.8987 cv37.9781 46.7615 40.1221 47.6019 40.7847 46.7366 cv42.1583 44.9444 40.1524 41.8885 42.0997 40.774 cv44.1211 39.6172 47.4874 40.5774 48.9019 38.2154 cv49.3887 37.4019 49.2266 35.9815 48.2549 35.4886 cv47.585 35.1485 46.5362 35.7039 46.0054 36.0611 cv44.9014 36.8038 43.9366 38.7669 42.4878 38.1832 cv41.6963 37.8638 41.4639 36.7208 41.7662 35.8785 cv42.6944 33.2942 45.3526 32.1844 46.9952 29.9075 cv47.899 28.6539 47.3897 26.9139 45.8677 26.3038 cv46.7989 25.9683 47.67 25.4661 48.5948 25.1895 cv50.5674 24.5997 52.4795 24.2767 54.4551 23.6568 cv54.9078 23.5149 55.42 23.6094 55.9102 23.6094 cv57.4292 23.5394 li71.8731 27.2598 83.5533 37.8614 88.7676 51.6399 cv88.6084 51.6543 li0 0.2 0.25 0 cmykf3.00489 82.8834 mo3.45704 82.7447 3.8584 83.0318 4.19581 83.1958 cv5.24024 83.7066 6.0254 84.4791 7.07032 85.0298 cv8.08106 85.5616 9.417 86.2647 9.61426 87.7823 cv9.85743 89.6509 10.7901 91.3165 12.129 92.6163 cv14.9708 95.3746 17.0938 98.6216 19.9048 100.764 cv21.5459 102.015 23.2418 102.985 24.9429 104.25 cv27.2999 106.003 30.2784 106.047 33.1387 106.319 cv35.9844 106.589 38.6348 105.595 41.4649 105.217 cv44.1631 104.858 46.7505 105.472 49.3174 106.336 cv50.8477 106.851 51.1802 105.46 51.6011 104.227 cv51.7022 103.931 52.4561 104.101 52.69 103.683 cv52.7969 103.491 52.7774 103.068 52.7002 103.042 cv49.2867 101.848 46.8111 99.0943 43.1739 97.8238 cv41.9039 97.3804 40.377 97.9742 39.3155 97.021 cv38.129 95.9585 37.1055 94.9048 35.7969 93.9439 cv34.4229 92.9351 32.92 92.4771 31.8819 90.983 cv31.5352 90.483 30.6851 90.3179 30.6338 90.1656 cv29.3526 86.3277 28.6275 82.4478 26.1436 79.0591 cv23.5674 75.5464 19.295 75.438 15.209 76.3179 cv13.858 76.6089 12.7237 75.1343 12.419 73.7964 cv11.9908 71.918 10.9551 69.2994 12.7002 68.5015 cv13.8042 67.9969 15.2754 69.7396 16.9927 68.723 cv18.6651 67.733 19.898 65.8621 19.3126 64.0564 cv19.0401 63.2178 17.6797 63.7396 17.3521 63.2024 cv16.3858 61.618 18.6763 60.3943 18.335 58.6546 cv18.2076 58.0052 17.3614 57.4483 17.3672 56.9219 cv17.3829 55.5777 19.419 56.4129 19.7276 55.1619 cv19.94 54.3018 18.19 53.4102 19.2374 52.3318 cv19.3975 52.167 19.7618 51.8582 20.15 52.0213 cv20.3926 50.3155 22.273 49.8335 22.8541 48.3514 cv23.6241 46.387 22.7637 44.4817 21.4932 42.8658 cv21.2486 42.5542 21.0723 41.9839 21.3331 41.3631 cv23.7012 35.7337 16.8033 40.2173 16.7208 37.5706 cv13.6143 36.9288 11.4175 40.3626 8.88282 41.7344 cv8.5586 41.5557 li3.33399 48.9874 0.26709 58.0455 0.26709 67.8199 cv0.26709 73.1324 1.17334 78.2339 2.83985 82.9776 cv3.00489 82.8834 li0 0.2 0.25 0 cmykf0.623047 74.1294 mo2.76563 74.5108 4.4502 76.0831 5.40626 77.8653 cv6.22657 79.3941 5.65332 81.2095 4.6084 82.7476 cv4.4087 83.0416 4.40674 83.5943 4.60938 83.8785 cv5.90772 85.6993 7.62208 86.8736 9.02247 88.4854 cv10.5303 90.2203 12.3165 91.3399 14.212 92.6792 cv15.3584 93.4888 15.9004 94.9624 16.8526 96.1207 cv17.127 96.4542 17.4957 96.8028 18.0123 96.9117 cv19.2891 97.1807 20.5782 96.1324 21.6119 96.9981 cv22.2276 97.5142 22.8169 98.4468 23.3975 98.4346 cv25.3516 98.3941 27.0342 99.3511 29.0166 99.0074 cv31.3106 98.6089 33.4815 98.3335 35.7129 97.5923 cv37.0704 97.1412 38.4932 99.3912 39.6773 98.8287 cv42.1695 97.646 39.1348 94.3853 37.5088 93.1158 cv35.3321 91.4156 31.5191 91.9761 29.7696 90.0499 cv29.2422 89.4693 28.4556 89.5816 27.8311 89.274 cv26.8853 88.8082 26.0489 88.1304 25.4727 87.2798 cv24.4952 85.8384 23.5816 84.4898 22.98 82.9205 cv22.4996 81.6695 21.8858 80.4546 21.878 79.0284 cv21.8741 78.3638 21.4795 77.7076 20.9151 77.3775 cv18.9014 76.1983 17.2833 74.647 15.0743 73.8834 cv13.9507 73.4947 12.8335 73.1334 11.6583 73.4463 cv11.6172 73.4576 11.6446 73.7212 11.6446 73.8843 cv11.6446 73.7212 11.6446 73.5577 11.6446 73.3946 cv11.8057 74.0582 10.939 74.4292 11.1553 75.1089 cv10.5782 75.022 10.7676 75.7906 10.419 75.7984 cv9.77344 75.8116 9.13184 76.0899 8.4375 75.6343 cv8.00294 75.3487 7.82032 74.9332 7.53467 74.5767 cv7.12012 74.0582 7.7461 73.5874 8.03663 73.1988 cv8.3794 72.7408 8.96094 72.409 9.11622 71.9007 cv9.55079 70.4808 8.3667 68.4036 9.37305 67.8265 cv10.504 67.1783 12.3809 68.6402 14.0943 68.0059 cv13.9043 67.5027 14.4727 67.3331 14.5137 67.0171 cv14.8223 64.6182 13.5459 62.2776 14.2349 59.9651 cv14.441 59.2725 15.1075 58.6219 15.4776 57.9185 cv15.7364 57.4253 15.1753 56.7584 15.1973 56.2549 cv15.2554 54.9615 16.4278 54.0149 17.3633 53.1575 cv18.1426 52.4434 19.2144 52.0391 20.2178 51.5955 cv19.71 51.6189 19.1944 51.3938 18.794 51.2347 cv18.169 50.9854 17.4053 50.4854 17.1211 49.8423 cv16.4185 48.2505 16.7071 46.3196 15.9029 44.8184 cv15.773 44.5757 14.9083 44.65 14.3492 44.7813 cv12.7676 45.1526 11.3399 45.5723 9.9668 46.5059 cv9.33106 46.9383 8.90577 47.5474 8.3877 48.0977 cv7.92676 48.587 7.34864 49.0428 6.72364 49.3443 cv6.04786 49.67 4.4629 49.3824 4.41895 49.2688 cv4.39747 48.9739 li1.63379 54.8628 0.0898438 61.438 0.0898438 68.3733 cv0.0898438 70.3428 0.214356 72.2828 0.456055 74.1861 cv0.623047 74.1294 li0 0.75 1 0.03 cmykf24.5635 32.1624 mo25.7334 32.4598 26.1036 33.6517 27.0411 34.0655 cv29.2247 35.0303 31.709 34.9925 33.8663 36.1011 cv33.3711 36.0474 33.0674 36.4727 32.6416 36.5909 cv34.6915 36.7105 36.542 36.3672 38.4966 35.7791 cv39.8287 35.3785 40.9439 34.5032 42.1939 33.8968 cv40.3482 33.2356 38.8594 31.9104 39.4302 29.7146 cv39.5313 29.3257 39.0962 28.9634 38.7442 28.7972 cv37.8536 28.3763 37.0108 28.4283 35.7706 28.8265 cv33.8672 29.4378 31.69 28.3172 29.7369 29.0862 cv27.836 29.8348 25.9947 30.7444 24.3135 31.9373 cv24.396 32.0196 24.4644 32.1373 24.5635 32.1624 cv0 0.75 1 0.03 cmykf49.5416 27.0384 mo50.7217 27.4485 49.4258 29.5589 50.2032 30.7601 cv50.5127 31.2388 50.2876 31.8953 49.9971 32.4078 cv49.4385 33.3919 48.2076 33.8465 48.0723 35.1214 cv49.1246 35.2276 49.5743 36.3631 49.5416 37.3255 cv50.6197 35.7735 52.8887 34.1077 54.2398 35.3411 cv56.1719 37.105 52.981 38.4725 51.7911 39.8465 cv50.919 40.8528 49.0025 39.9305 47.5923 40.5337 cv47.2095 40.6976 47.2906 41.2149 47.1973 41.5215 cv46.7325 43.0499 47.6934 44.6648 46.7784 46.0992 cv46.4761 46.5723 46.0772 47.0564 45.5899 47.3042 cv44.8682 47.6719 43.834 46.8978 43.2398 47.6644 cv42.7461 48.3028 43.6172 48.8414 43.9356 48.8853 cv45.0933 49.0445 45.9693 49.8384 47.0923 49.8174 cv46.3204 51.0098 43.9927 51.0867 44.3838 52.4451 cv45.0245 54.6751 47.9307 55.7669 49.919 54.742 cv50.8995 54.2366 50.6182 52.4947 51.0606 51.305 cv51.2725 50.7347 52.0289 51.0115 52.5523 50.6575 cv53.2081 50.2146 53.6368 51.2552 54.2256 51.4324 cv55.2144 51.7305 56.417 51.7864 57.3257 51.4043 cv57.5308 51.3182 57.9693 51.3033 58.0879 51.0303 cv58.254 50.6495 57.8233 50.49 57.5977 50.3509 cv56.3028 49.5518 54.0772 49.4759 53.9502 47.8577 cv54.8521 48.0027 55.96 48.6277 56.5127 48.1834 cv57.0523 47.7491 57.2325 46.5516 56.6451 45.6534 cv58.1456 46.158 58.6226 47.9607 59.8916 48.4195 cv60.7999 48.7474 61.8052 49.0564 62.4195 49.6753 cv63.1236 50.3846 63.4639 51.5555 62.8687 52.4112 cv62.3834 53.1089 61.2359 52.6326 60.3272 52.8023 cv60.0391 52.8562 60.0166 53.2935 59.7969 53.4444 cv58.5938 54.2698 56.8653 53.5394 56.0909 54.3902 cv53.8414 56.8619 50.8106 57.0484 48.1177 58.4756 cv47.2188 58.9522 46.3672 59.7264 45.9693 60.6385 cv45.5596 61.576 45.2398 62.6863 45.8643 63.7801 cv46.3292 64.594 46.7081 65.3907 47.2212 66.139 cv49.2837 69.1431 52.4317 70.4918 55.6651 71.616 cv56.542 74.2256 57.8755 76.6158 58.8545 79.2066 cv59.1949 80.108 60.2608 80.1607 60.8335 80.231 cv63.3545 80.5406 65.9629 80.7378 68.3565 79.8267 cv69.6304 79.3414 70.7085 78.3726 72.0757 77.9839 cv72.0127 79.9898 71.1773 82.6402 73.7754 83.4214 cv74.3643 83.5987 74.0835 84.2852 73.9454 84.5508 cv73.4678 85.4683 73.0254 86.375 72.6065 87.3101 cv72.4834 87.5845 72.4825 87.9795 72.6065 88.2525 cv72.9688 89.0484 73.4874 89.9136 74.3077 90.1187 cv74.982 90.2872 75.4673 90.6841 76.0294 90.8062 cv76.4463 90.898 77.0162 89.9708 76.8487 89.546 cv76.2725 88.0884 75.668 86.5884 76.1045 85.1202 cv76.3399 84.3287 77.3653 84.0347 77.9112 83.3394 cv78.2188 82.9483 78.3438 82.4195 78.1797 81.9097 cv77.9473 81.1871 77.0191 81.0528 76.7911 80.4117 cv76.4278 79.3902 76.6002 78.1363 75.9004 77.3311 cv74.7388 75.9947 72.9688 77.5191 71.6426 77.0772 cv69.3604 76.3169 69.3965 73.565 69.501 71.3655 cv69.5264 70.8235 68.835 70.1468 68.8057 69.6473 cv68.5616 65.5252 64.6465 64.2413 62.3541 61.5101 cv61.2281 60.169 63.3052 60.1189 64.2374 59.8594 cv64.0743 59.6138 63.9112 59.3699 63.7476 59.1246 cv66.502 58.8912 68.8135 57.3152 71.584 56.9109 cv72.8594 56.7249 73.6329 57.6912 74.4214 58.4961 cv74.6915 58.772 75.6885 59.0272 76.1822 58.7698 cv77.876 57.8875 79.1602 56.5069 80.7188 55.2972 cv82.3057 54.066 84.4537 53.8904 85.7374 52.2244 cv85.9009 52.0118 85.8843 51.5699 85.7452 51.3118 cv84.2745 48.5887 82.5171 46.1963 81.1812 43.428 cv81.0518 43.1604 81.2461 42.7352 81.084 42.5076 cv78.1363 38.3663 75.128 34.8389 70.7686 32.5857 cv67.5123 30.9029 63.921 30.1126 60.3189 29.4878 cv60.4014 29.5704 60.4815 29.6509 60.5635 29.733 cv58.211 27.3802 53.8794 26.459 50.0367 26.8455 cv49.9376 26.8553 49.7823 27.1221 49.5416 27.0384 cv0 0.75 1 0.03 cmykf0.48987 lw28.3555 28.1407 mo23.7012 30.3453 16.3536 33.7745 16.3536 36.7134 cv16.3536 39.6524 18.313 42.1016 26.1504 40.1424 cv33.9883 38.1827 39.8672 35.4888 42.5616 33.7745 cv45.2554 32.0596 48.6846 27.4058 45.5005 25.9363 cv42.3165 24.4668 38.397 24.9566 34.4786 26.1812 cv30.5596 27.4058 28.3555 28.1407 28.3555 28.1407 cvcp1 0.8 0 0.03 cmyks16.8433 39.1624 mo11.6998 46.5105 7.53565 53.1236 5.33106 70.2688 cv3.12696 87.4146 17.3331 104.315 43.0513 113.378 cv1 0.8 0 0.03 cmyks16.3536 35.7337 mo13.169 37.9378 12.9249 36.9583 9.25 40.6321 cv1 0.8 0 0.03 cmyks23.4561 30.5901 mo19.5376 30.835 li1 0.8 0 0.03 cmyks31.7842 26.9161 mo31.7842 26.9161 32.0289 24.9566 34.2334 23.7317 cv1 0.8 0 0.03 cmyks45.5005 25.9363 mo49.419 24.2217 53.0928 23.242 57.502 23.4869 cv1 0.8 0 0.03 cmyks46.7251 28.8755 mo57.2569 30.3453 73.1778 35.7337 84.4444 53.1236 cv86.649 58.7571 88.8536 66.595 86.1592 79.0865 cv83.4644 91.5777 79.7906 98.4361 79.7906 98.4361 cv1 0.8 0 0.03 cmyks43.296 34.0191 mo53.0928 38.1827 65.8296 46.7554 71.4629 59.2469 cv77.0967 71.7383 79.0557 80.5562 72.4429 104.805 cv1 0.8 0 0.03 cmyks37.6622 36.7134 mo49.419 49.2049 69.0137 82.7608 67.2989 108.233 cv1 0.8 0 0.03 cmyks28.6001 39.6524 mo29.0899 53.6136 29.8243 81.046 58.9717 111.908 cv1 0.8 0 0.03 cmyks21.252 41.1221 mo16.3536 58.0223 7.29102 91.5777 50.399 113.378 cv1 0.8 0 0.03 cmyks0.1875 66.1053 mo3.12696 69.7791 7.29102 72.2286 12.4346 73.2085 cv17.5782 74.188 31.0489 76.8824 46.9698 69.0445 cv62.8907 61.2066 74.4024 55.0831 78.566 35.7337 cv1 0.8 0 0.03 cmyks24.4361 108.233 mo33.0088 110.683 45.5005 110.683 59.2168 106.274 cv72.9327 101.866 81.9952 94.0274 89.8331 81.046 cv1 0.8 0 0.03 cmyks4.10645 49.45 mo9.00538 54.3484 12.9249 54.8382 21.252 53.8584 cv29.5801 52.879 47.46 47.9803 56.7676 37.9378 cv66.0743 27.8956 62.4004 25.2015 62.4004 25.2015 cv1 0.8 0 0.03 cmyks88.6084 51.6543 mo88.1187 59.982 81.5049 75.9024 70.9732 83.0054 cv60.4415 90.1084 53.5831 94.2725 33.4986 96.232 cv13.4141 98.1915 4.59668 85.4546 2.88184 81.5362 cv1 0.8 0 0.03 cmyks45.9903 113.543 mo71.2418 113.543 91.7134 93.0718 91.7134 67.8199 cv91.7134 42.5679 71.2418 22.0967 45.9903 22.0967 cv20.7383 22.0967 0.26709 42.5679 0.26709 67.8199 cv0.26709 93.0718 20.7383 113.543 45.9903 113.543 cvcp1 0.8 0 0.03 cmyks119.715 133.462 mo113.347 126.604 103.06 119.011 93.752 118.766 cv84.4444 118.521 77.8311 119.011 67.2989 127.829 cv56.7676 136.646 51.3785 144.974 51.8682 147.668 cv52.3584 150.362 52.8482 150.607 54.8077 147.178 cv56.7676 143.749 68.7686 125.869 79.0557 123.42 cv89.3433 120.971 93.9966 122.439 99.3858 124.399 cv104.774 126.359 112.367 132.482 115.061 135.911 cv117.756 139.341 124.369 150.607 124.369 150.607 cv133.187 147.178 li119.715 133.462 li0.3 0.100001 0 0 cmykf76.3619 12.71 mo73.6675 8.54615 73.1778 7.07642 74.6475 6.58643 cv76.1168 6.09668 79.3008 8.79102 80.0357 11.7303 cv80.7706 14.6692 82.7295 19.8128 78.3213 34.5091 cv73.9126 49.2049 68.0342 65.3707 63.3804 71.0037 cv62.1553 72.2286 59.4615 72.7183 62.1553 68.7994 cv64.8497 64.8807 73.4229 47.0005 77.0967 31.0799 cv79.0557 23.7317 79.3008 21.2825 78.0762 17.8536 cv76.8516 14.4246 76.3619 12.71 76.3619 12.71 cv0.3 0.100001 0 0 cmykf93.6246 8.78003 mo94.9024 2.17701 95.4117 -0.268311 98.3487 0 cv101.286 0.268555 100.765 4.1836 99.7579 7.60425 cv98.7505 11.0257 94.7012 27.4043 97.7286 47.0237 cv100.756 66.6434 102.621 78.6597 116.078 111.1 cv120.418 119.708 130.556 138.403 148.007 161.567 cv144.825 161.297 135.543 158.039 132.873 155.078 cv130.202 152.117 104.674 97.5367 104.674 97.5367 cv96.1124 65.3814 li92.8536 44.0455 li93.6246 8.78003 li0.3 0.100001 0 0 cmykf21.0069 167.263 mo21.0069 167.263 30.0699 150.362 34.7232 145.464 cv39.377 140.565 52.128 126.717 69.5035 124.399 cv84.1993 122.439 102.57 135.421 111.632 142.77 cv121.873 151.072 126.328 158.69 128.533 160.895 cv130.737 163.099 133.431 161.384 133.187 158.935 cv132.941 156.485 127.063 148.893 123.879 144.729 cv109.428 128.809 89.3433 118.521 71.7081 120.971 cv54.0733 123.42 30.8042 138.851 16.1084 164.813 cv18.1055 164.114 20.3877 164.9 21.0069 167.263 cv1 0.8 0 0 cmykf95.8545 5.61353 mo92.6607 6.81275 91.4185 9.00757 90.6153 17.5743 cv89.8126 26.1404 87.8946 51.5992 96.4966 78.6109 cv105.1 105.623 113.509 126.021 125.104 146.443 cv136.698 166.866 137.689 165.404 144.534 167.173 cv137.732 160.016 121.772 134.17 114.567 116.231 cv107.362 98.293 95.1231 66.5982 95.0562 44.3082 cv94.9888 22.0179 96.2486 17.6192 97.7725 10.7728 cv99.2969 3.92652 95.8545 5.61353 95.8545 5.61353 cv1 0.8 0 0 cmykf77.8311 8.30103 mo74.1573 1.198 76.1168 1.44312 77.3414 0.218506 cv78.566 -1.00611 82.7295 0.463379 83.9546 5.60694 cv85.1792 10.7505 88.3633 21.7723 84.4444 41.6119 cv80.5254 61.4515 62.4004 95.9869 54.0733 109.949 cv45.7452 123.91 44.2759 128.073 39.1319 127.339 cv37.4175 125.624 38.6421 125.135 39.8672 123.42 cv41.0918 121.705 60.4415 93.7828 71.7081 67.5748 cv82.9747 41.367 83.2198 29.6102 81.0152 20.7925 cv78.8111 11.9751 77.8311 8.30103 77.8311 8.30103 cv1 0.8 0 0 cmykf20.15 188.571 mo20.15 173.753 li14.3936 173.753 li14.3936 188.571 li20.15 188.571 li1 0.8 0 0.03 cmykf17.2715 172.473 mo18.898 172.473 20.2159 171.154 20.2159 169.528 cv20.2159 167.902 18.898 166.584 17.2715 166.584 cv15.6456 166.584 14.3277 167.902 14.3277 169.528 cv14.3277 171.154 15.6456 172.473 17.2715 172.473 cv1 0.8 0 0.03 cmykf69.9322 177.611 mo66.0743 174.121 61.8877 173.386 55.9102 173.386 cv49.0284 173.386 43.1124 175.835 43.1124 180.611 cv43.1124 183.428 45.1939 188.756 56.7676 188.756 cv69.1592 188.756 70.7896 181.713 70.7896 180.673 cv56.7676 180.673 li56.7676 183.673 li63.0127 183.673 li61.6661 185.021 60.0738 186 56.7061 185.938 cv53.3379 185.877 49.2354 184.224 49.2354 181.04 cv49.2354 177.856 52.6646 176.08 55.8487 176.08 cv59.9742 176.08 63.9317 177.611 64.8497 179.325 cv69.9322 177.611 li1 0.8 0 0.03 cmykf41.3365 178.591 mo41.3365 180.673 39.6832 183.184 36.4376 183.184 cv30.3145 183.184 li30.3145 188.571 li24.5586 188.571 li24.5586 173.753 li36.377 173.753 li39.9893 173.753 41.3365 176.509 41.3365 178.591 cvcp33.7437 176.631 mo30.3145 176.631 li30.3145 180.795 li33.8663 180.795 li35.7032 180.795 36.1929 179.448 36.1929 178.407 cv36.1929 177.366 35.5806 176.631 33.7437 176.631 cv1 0.8 0 0.03 cmykf91.3028 178.591 mo91.3028 180.673 89.6495 183.184 86.4044 183.184 cv80.2803 183.184 li80.2803 188.571 li74.525 188.571 li74.525 173.753 li86.3428 173.753 li89.9556 173.753 91.3028 176.509 91.3028 178.591 cvcp83.71 176.631 mo80.2803 176.631 li80.2803 180.795 li83.8321 180.795 li85.6695 180.795 86.1592 179.448 86.1592 178.407 cv86.1592 177.366 85.5469 176.631 83.71 176.631 cv1 0.8 0 0.03 cmykf7.7129 204.146 mo6.90821 204.146 li6.90821 195.975 li7.7129 195.975 li7.7129 204.146 li1 0.8 0 0 cmykf13.7979 195.975 mo13.7979 204.146 li12.6954 204.146 li10.2032 197.062 li10.1856 197.062 li10.1856 204.146 li9.46827 204.146 li9.46827 195.975 li10.6055 195.975 li13.0635 202.969 li13.0806 202.969 li13.0806 195.975 li13.7979 195.975 li1 0.8 0 0 cmykf16.0586 201.712 mo16.0586 201.95 li16.0586 203.059 16.6006 203.41 17.1172 203.41 cv17.7554 203.41 18.2452 203.059 18.2452 202.086 cv18.2452 200.275 15.4112 200.479 15.4112 198.023 cv15.4112 196.575 16.2071 195.806 17.2657 195.806 cv18.42 195.806 19.0674 196.53 19.0147 198.193 cv18.1753 198.193 li18.1841 197.299 17.9654 196.711 17.2042 196.711 cv16.7232 196.711 16.2334 197.027 16.2334 197.91 cv16.2334 199.71 19.0674 199.449 19.0674 202.041 cv19.0674 203.761 18.149 204.315 17.1084 204.315 cv15.2452 204.338 15.2452 202.493 15.2627 201.712 cv16.0586 201.712 li1 0.8 0 0 cmykf24.0401 195.975 mo24.0401 196.88 li22.378 196.88 li22.378 204.146 li21.5733 204.146 li21.5733 196.88 li19.9112 196.88 li19.9112 195.975 li24.0401 195.975 li1 0.8 0 0 cmykf25.9698 204.146 mo25.1651 204.146 li25.1651 195.975 li25.9698 195.975 li25.9698 204.146 li1 0.8 0 0 cmykf31.2242 195.975 mo31.2242 196.88 li29.5626 196.88 li29.5626 204.146 li28.7574 204.146 li28.7574 196.88 li27.0958 196.88 li27.0958 195.975 li31.2242 195.975 li1 0.8 0 0 cmykf32.2178 195.975 mo33.023 195.975 li33.023 201.203 li33.023 202.991 33.4424 203.444 34.2037 203.444 cv34.9649 203.444 35.3843 202.991 35.3843 201.203 cv35.3843 195.975 li36.189 195.975 li36.189 201.158 li36.189 203.421 35.542 204.315 34.2037 204.315 cv32.8653 204.315 32.2178 203.421 32.2178 201.158 cv32.2178 195.975 li1 0.8 0 0 cmykf41.3179 195.975 mo41.3179 196.88 li39.6563 196.88 li39.6563 204.146 li38.8511 204.146 li38.8511 196.88 li37.1895 196.88 li37.1895 195.975 li41.3179 195.975 li1 0.8 0 0 cmykf45.2642 195.975 mo47.2061 195.975 li48.0108 195.975 48.5884 196.349 48.9029 197.22 cv49.1568 197.91 49.1827 199.54 49.1827 199.8 cv49.1827 201.543 49.0606 202.55 48.7979 203.093 cv48.4571 203.795 47.8184 204.146 46.7164 204.146 cv45.2642 204.146 li45.2642 195.975 licp46.0689 203.24 mo46.8301 203.24 li47.9498 203.24 48.3604 202.697 48.3604 200.796 cv48.3604 199.144 li48.3604 197.491 47.9673 196.88 47.127 196.88 cv46.0689 196.88 li46.0689 203.24 li1 0.8 0 0 cmykf50.7779 204.146 mo50.7779 195.975 li54.0318 195.975 li54.0318 196.88 li51.5831 196.88 li51.5831 199.506 li53.8565 199.506 li53.8565 200.411 li51.5831 200.411 li51.5831 203.24 li54.084 203.24 li54.084 204.146 li50.7779 204.146 li1 0.8 0 0 cmykf58.3541 204.146 mo58.3541 195.975 li60.2261 195.975 li61.0748 195.975 61.9839 196.383 61.9839 198.307 cv61.9839 200.162 60.8643 200.547 60.2173 200.547 cv59.1592 200.547 li59.1592 204.146 li58.3541 204.146 licp59.1592 199.642 mo60.042 199.642 li60.375 199.642 61.1622 199.528 61.1622 198.25 cv61.1622 197.005 60.4449 196.88 60.2696 196.88 cv59.1592 196.88 li59.1592 199.642 li1 0.8 0 0 cmykf63.3531 204.146 mo63.3531 195.975 li64.1578 195.975 li64.1578 199.506 li66.3702 199.506 li66.3702 195.975 li67.1753 195.975 li67.1753 204.146 li66.3702 204.146 li66.3702 200.411 li64.1578 200.411 li64.1578 204.146 li63.3531 204.146 li1 0.8 0 0 cmykf71.6045 195.975 mo72.418 195.975 li70.6944 201.034 li70.6944 204.146 li69.8902 204.146 li69.8902 201.034 li68.1934 195.975 li69.0938 195.975 li70.3272 199.925 li71.6045 195.975 li1 0.8 0 0 cmykf74.0069 201.712 mo74.0069 201.95 li74.0069 203.059 74.5489 203.41 75.065 203.41 cv75.7032 203.41 76.1934 203.059 76.1934 202.086 cv76.1934 200.275 73.3594 200.479 73.3594 198.023 cv73.3594 196.575 74.1553 195.806 75.2139 195.806 cv76.3682 195.806 77.0157 196.53 76.9629 198.193 cv76.1231 198.193 li76.1319 197.299 75.9136 196.711 75.1524 196.711 cv74.6714 196.711 74.1817 197.027 74.1817 197.91 cv74.1817 199.71 77.0157 199.449 77.0157 202.041 cv77.0157 203.761 76.0967 204.315 75.0562 204.315 cv73.1929 204.338 73.1929 202.493 73.2105 201.712 cv74.0069 201.712 li1 0.8 0 0 cmykf79.3555 204.146 mo78.5503 204.146 li78.5503 195.975 li79.3555 195.975 li79.3555 204.146 li1 0.8 0 0 cmykf80.9883 198.476 mo80.9883 196.847 81.6358 195.806 82.9737 195.806 cv84.3121 195.806 84.959 196.847 84.959 198.476 cv84.959 201.158 li84.959 201.746 84.7671 203.195 84.4082 203.398 cv84.4258 203.421 li84.5396 203.376 84.8458 203.24 84.9766 203.24 cv85.6065 203.24 li85.6065 204.146 li82.9825 204.146 li82.125 204.146 80.9883 204.078 80.9883 201.158 cv80.9883 198.476 licp84.1373 201.203 mo84.1373 198.442 li84.1373 196.733 83.2276 196.677 82.9737 196.677 cv82.7203 196.677 81.8106 196.733 81.8106 198.442 cv81.8106 201.203 li81.8106 202.562 82.0381 203.308 82.9825 203.308 cv83.9273 203.308 84.1373 202.562 84.1373 201.203 cv1 0.8 0 0 cmykf86.5718 195.975 mo87.377 195.975 li87.377 201.203 li87.377 202.991 87.7964 203.444 88.5577 203.444 cv89.3184 203.444 89.7383 202.991 89.7383 201.203 cv89.7383 195.975 li90.543 195.975 li90.543 201.158 li90.543 203.421 89.8956 204.315 88.5577 204.315 cv87.2193 204.315 86.5718 203.421 86.5718 201.158 cv86.5718 195.975 li1 0.8 0 0 cmykf92.1294 204.146 mo92.1294 195.975 li95.3829 195.975 li95.3829 196.88 li92.9341 196.88 li92.9341 199.506 li95.2085 199.506 li95.2085 200.411 li92.9341 200.411 li92.9341 203.24 li95.4356 203.24 li95.4356 204.146 li92.1294 204.146 li1 0.8 0 0 cmykf6.6421 207.609 mo8.58399 207.609 li9.38868 207.609 9.96582 207.983 10.2813 208.854 cv10.5347 209.545 10.5611 211.174 10.5611 211.435 cv10.5611 213.177 10.4385 214.185 10.1758 214.728 cv9.83497 215.429 9.19629 215.78 8.09473 215.78 cv6.6421 215.78 li6.6421 207.609 licp7.44727 214.875 mo8.20801 214.875 li9.32764 214.875 9.73877 214.331 9.73877 212.431 cv9.73877 210.778 li9.73877 209.126 9.34522 208.515 8.50538 208.515 cv7.44727 208.515 li7.44727 214.875 li1 0.8 0 0 cmykf12.9053 207.609 mo13.71 207.609 li13.71 212.838 li13.71 214.626 14.1299 215.078 14.8912 215.078 cv15.6524 215.078 16.0718 214.626 16.0718 212.838 cv16.0718 207.609 li16.8765 207.609 li16.8765 212.792 li16.8765 215.056 16.2295 215.949 14.8912 215.949 cv13.5528 215.949 12.9053 215.056 12.9053 212.792 cv12.9053 207.609 li1 0.8 0 0 cmykf25.7554 209.794 mo25.7554 208.832 25.4493 208.312 24.6358 208.312 cv24.3819 208.312 23.4727 208.368 23.4727 210.077 cv23.4727 212.838 li23.4727 214.626 23.8746 215.078 24.6358 215.078 cv25.2129 215.078 25.5977 214.875 25.7637 214.716 cv25.7637 212.272 li24.6006 212.272 li24.6006 211.367 li26.5689 211.367 li26.5689 215.338 li26.0528 215.7 25.4493 215.949 24.6358 215.949 cv23.2974 215.949 22.65 215.056 22.65 212.792 cv22.65 210.11 li22.65 208.481 23.2974 207.44 24.6358 207.44 cv26.0005 207.44 26.6475 208.085 26.5953 209.794 cv25.7554 209.794 li1 0.8 0 0 cmykf29.0362 215.78 mo29.0362 207.609 li29.8404 207.609 li29.8404 214.875 li32.1583 214.875 li32.1583 215.78 li29.0362 215.78 li1 0.8 0 0 cmykf33.8575 212.792 mo33.8575 210.11 li33.8575 208.481 34.5049 207.44 35.8428 207.44 cv37.1807 207.44 37.8282 208.481 37.8282 210.11 cv37.8282 212.792 li37.8282 215.056 37.1807 215.949 35.8428 215.949 cv34.5049 215.949 33.8575 215.056 33.8575 212.792 cvcp37.0059 212.838 mo37.0059 210.077 li37.0059 208.368 36.0967 208.312 35.8428 208.312 cv35.5894 208.312 34.6792 208.368 34.6792 210.077 cv34.6792 212.838 li34.6792 214.626 35.0821 215.078 35.8428 215.078 cv36.6036 215.078 37.0059 214.626 37.0059 212.838 cv1 0.8 0 0 cmykf40.2691 215.78 mo40.2691 207.609 li42.3248 207.609 li43.1993 207.609 43.4971 207.994 43.7325 208.447 cv43.9517 208.889 43.9864 209.375 43.9864 209.533 cv43.9864 210.552 43.7154 211.231 42.9019 211.468 cv42.9019 211.525 li43.8028 211.661 44.1963 212.362 44.1963 213.482 cv44.1963 215.576 43.0157 215.78 42.2984 215.78 cv40.2691 215.78 licp41.0738 214.875 mo42.211 214.875 li43.0684 214.875 43.3741 214.083 43.3741 213.482 cv43.3741 212.182 42.753 211.955 41.9307 211.955 cv41.0738 211.955 li41.0738 214.875 licp41.0738 211.05 mo42.2461 211.05 li42.876 211.038 43.1817 210.541 43.1817 209.748 cv43.1817 209.069 42.8843 208.515 42.211 208.515 cv41.0738 208.515 li41.0738 211.05 li1 0.8 0 0 cmykf46.4971 215.78 mo46.4971 207.609 li49.751 207.609 li49.751 208.515 li47.3023 208.515 li47.3023 211.14 li49.5762 211.14 li49.5762 212.045 li47.3023 212.045 li47.3023 214.875 li49.8038 214.875 li49.8038 215.78 li46.4971 215.78 li1 0.8 0 0 cmykf55.3438 207.609 mo57.2852 207.609 li58.0899 207.609 58.667 207.983 58.9825 208.854 cv59.2359 209.545 59.2618 211.174 59.2618 211.435 cv59.2618 213.177 59.1397 214.185 58.8775 214.728 cv58.5357 215.429 57.8975 215.78 56.7955 215.78 cv55.3438 215.78 li55.3438 207.609 licp56.148 214.875 mo56.9092 214.875 li58.0289 214.875 58.4395 214.331 58.4395 212.431 cv58.4395 210.778 li58.4395 209.126 58.046 208.515 57.2066 208.515 cv56.148 208.515 li56.148 214.875 li1 0.8 0 0 cmykf61.6329 215.78 mo61.6329 207.609 li64.8868 207.609 li64.8868 208.515 li62.4376 208.515 li62.4376 211.14 li64.7115 211.14 li64.7115 212.045 li62.4376 212.045 li62.4376 214.875 li64.9395 214.875 li64.9395 215.78 li61.6329 215.78 li1 0.8 0 0 cmykf70.5665 215.78 mo70.5665 207.609 li72.4385 207.609 li73.2867 207.609 74.1963 208.017 74.1963 209.94 cv74.1963 211.796 73.0772 212.182 72.4297 212.182 cv71.3711 212.182 li71.3711 215.78 li70.5665 215.78 licp71.3711 211.276 mo72.2549 211.276 li72.587 211.276 73.3741 211.163 73.3741 209.884 cv73.3741 208.64 72.6568 208.515 72.4825 208.515 cv71.3711 208.515 li71.3711 211.276 li1 0.8 0 0 cmykf77.7139 207.609 mo78.7374 207.609 li80.793 215.78 li79.8921 215.78 li79.4376 213.834 li76.9971 213.834 li76.5245 215.78 li75.711 215.78 li77.7139 207.609 licp78.2042 208.571 mo78.1866 208.571 li77.1983 212.929 li79.2188 212.929 li78.2042 208.571 li1 0.8 0 0 cmykf83.3824 212.023 mo83.3824 215.78 li82.5782 215.78 li82.5782 207.609 li84.7559 207.609 li85.875 207.609 86.2686 208.628 86.2686 209.646 cv86.2686 210.608 85.8575 211.344 85.1143 211.514 cv85.1143 211.536 li85.8404 211.684 86.1026 212 86.1465 213.641 cv86.1553 213.992 86.2427 215.271 86.3653 215.78 cv85.5254 215.78 li85.2979 215.214 85.3506 214.15 85.2803 213.063 cv85.2193 212.068 84.5982 212.023 84.3272 212.023 cv83.3824 212.023 licp83.3824 211.117 mo84.5894 211.117 li85.167 211.117 85.4468 210.473 85.4468 209.76 cv85.4468 209.171 85.2193 208.515 84.5982 208.515 cv83.3824 208.515 li83.3824 211.117 li1 0.8 0 0 cmykf89.3321 215.78 mo88.5269 215.78 li88.5269 207.609 li89.3321 207.609 li89.3321 215.78 li1 0.8 0 0 cmykf92.4317 213.347 mo92.4317 213.585 li92.4317 214.693 92.9737 215.044 93.4898 215.044 cv94.1285 215.044 94.6182 214.693 94.6182 213.72 cv94.6182 211.909 91.7842 212.113 91.7842 209.658 cv91.7842 208.209 92.5801 207.44 93.6387 207.44 cv94.793 207.44 95.4405 208.164 95.3877 209.828 cv94.5484 209.828 li94.5572 208.934 94.3384 208.345 93.5772 208.345 cv93.0962 208.345 92.6065 208.662 92.6065 209.545 cv92.6065 211.344 95.4405 211.084 95.4405 213.675 cv95.4405 215.396 94.5225 215.949 93.481 215.949 cv91.6182 215.973 91.6182 214.128 91.6358 213.347 cv92.4317 213.347 li1 0.8 0 0 cmykf%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (dyon) (ipgp)%%Title: (Logo IPG.eps)%%CreationDate: 6/04/05 11:16%AI9_DataStream%Gb"07M3=YnOs[%BLj'+\=io=.c/ap)i+Q[;8&d)mMMI>M]04^`UF!6uA8^R-Rg7W:LY-7*J"Hg-&4a"HenTr&-EH\C&,ZF_iAVa4%=0L0c0DBC&m_;sjr:T*H2p2cMdZeI6Z<b+hoq-0:gclf:\VM[\[(D.1pnc*o,%_qY$$g<TN'+Os\:2!Ch`lV\pi*orHJ1L:5!2#W%]\NF,FhdkHl8s:SCAC[&gY7K*Qg<D,lb=uWXZd%umr!%;]8+G=X64',QiM27o?fcdaYWKIr`8M9pXcl-Dt[PZ_tuBbgr\;HGU%X]%^VAJe5KeFc`,RQ%Q`'#%]/Gud^0#gWLX/2s>^j6`<[R@B?Z,kdn"fX=dsq57U#j><BfTHETo&]9>^ssC=.f8KHnVb`f]#TF,<]RX%p"p"(rc8&4s0O+:b2!"7D-*>t`Vce8gT/AqkF76R_+C9o5i,a`pYT;jgcd5[QG&R]q>@iN-h[:>!1rs^Pf]?hhsbj0X:P;YB]MB>%pu72`*k$gm3%]P\>5>)"c1r`R+(0=Ed3&(+Df;hNpZ*5O`MG)irN7__^%ngMd>+SM6S?PuN5!tJB`Guprl:(RDm"$HT-'Z==3>o1%F0/]RH@5_Wk$Nd)64(j%X[9dM\_TLLnc%ZRR:,\ZdDnG!GdG0`G\Q>RGILXaPY.2Y2/Vi<X2j]&cQWH%[kAlea3-Tq[m#/LH[YS9%rim"'q:klH+!1ChBD\BDiF;@Y(h[mZ_IY6n^*k0X7RSQWUpN)([.Leeb42l\FG5b/#YA(X$fR,l+)em*\c5b<7RhB)IrY.)s7k^T%qYB.^V.UT9`t)[.pJ\mnSqmH1BDaNbSG`?Gc'p=4aY'q!+RU%kpb(r<OVE+)5O\%kdcp'^I/e6]c2H1P&2hYkJnC=2f6\BWHhDb4%m@;FEq4ID2?*8['L6ta,jW&`hLnCO%k@W29cJc6RGh4sgl^Y]$gYljp.Rpe&&[,Y3Wu056`ndfj=UNlIJi6'3n8p*m<=2pg0Dn5=%bm(:.)a([ai18*sD0A"R]A(;\Vft58^YA!/3b+_ac::CSGO]3jhmp]Vr'W'nKV)o]S/S:$*\bH,ZiNYk$+q3'oNC+*T6LNun.Rr6%S[<$;KV-%!^B"L5(fRE5j.d@Y_G@Plm/UqfK:+6LQ&80[r7!)/F.L"i?0A)[A*.Wf=pt9q/)Z2TkXeiPZ.AYk`UFhKJ6uMhV2@GE%r9tB'J=Wi-Id5,X_,%E>Ie]nCW*H'=eaYA'irRB:nP<@FSY&e#Xd!^_/rI3b*])Dnl+#Gg>;'j@^<d):29l>JGZqB'GC^ibU6Y:.%n5Ge>ZhTA8^i&\BEH[NdV4<R=gtd4bnOhh"bZm.sH(i>K>>qB1c;(@Aj!rk=o<ohP2k<$6[F)C+I9tg_0:fXGVK0#G\^Erof^VW1%[nF=sZZt#r[7aPq;s/Sjm`,!ls6t-nTdK#PPoH"c3abF:P'FQ:UWp3k[uIHelBB4]r5*C&MPbi*X7,]<qW5E)m_AF1nL=Zqo\]M1%P.pA!oda['ST>`3f<<^shs%oKCVA<NrO75-?>[.Yl+coWnkrihhtf4T?`MGWG5/'&Wit/-r@ReI^[YaA[G0N_(0dZCZFfLgGJ!3C%AQ<nX07TlmH,iTm14W%qhd*n3:MBh^0mFHskkhEtkHd@eb3aJg*roHV6L/a(g=8*8UIZJjh5mH<Y;<Jt%JlS=q@`^(E/I)'g3^V?%<bN5<c6mjRJbP"*SZQ#H]IM>ZiAk*l<U'uQlP4CF_BPha+;XNOArc\'0N.;kkkj($=E0igHE_O.ku6c5J9P,[o;eB6.pYI&qL&#-%m^Dh,a(I+bB'1_:bs#F-m3K@J-WH7Q-B'FaTf#neB6PA?c?tDFK#?l*k3-A&A+@$6RE]JF<[M[[(\CcY4ZR\sXD;;3%fLrod\X+m%']caIFgVT-Grffb`bt-X6@[FYi17=?[I]I-?a8(&5X-$og#*UCp00Kk(`(C01Z-I7Jo04Z7#oj![E#b8>;e!>Z8*p\6<Toj*r#r#%OmlPbb>#pn!]-oJqc:B!;euYapM4+eI]b$6n1q(uL8M'3XuM-==%+OHEPsd<=7em0ai^CB9mKb&=)es-<f&5L2osJ7MjUS7")5NU%"u7NE;ETlT\G4=7/&BnUK^QGJ=;@nuFD$eQ_*0e?<Orl7b,LLXXQ%jG;oEu45HNK8*K3+f"KhsAaAkn`#u*_sYhZ4:@")t[UjoX(%D;A_4/k)kp8tOnl#1[oO6ST6t?=djgl.JEn%e'VX%FZ>BNGFq`PSmagHt2LWr<D_B6\SU9FCFLf5$mMH*8h6nfrBGM;(5kh$PcV0%RaMuLV\k1(`l0mH#1U[DSW1:#jPN?FK<BFY!'l4p6mJ@!f4ZXd_0=1in[9BMLBQ962WR\3k45i8N%qn?"0t&rNpFTj'L(udCo*CG%Z4bZg:A*rckBc5"Pr0H65e7kWnf@AsMXn8s\oKRc]"#J[qCQq"[LaRgW;<N&C/q$<b`l)!5iVGq7KB>!]6S80\M>\_60%7<hkM`8%)*:Q.ml/bFp&J$Mau*-\$foMih4e\BokpggDebgoj1<C6FX=)af%4#HbY0j6`Y<RN`kg$e*-]CfqH@BGTipNcXE`c03(,T@8nF7I%<EmWV'CLkT%8"O__=c(D#enXs'CdXnEdO'/`AlB_FncEZ<jB&7[:)e].AfbZ2.isE:^aoemZPXcKKi)n:qKa_L@;WN$I,j]NB6V`%J'6&;N>"^#f#,)%_%FJfo`.b&D[T3Ucm-PbHt'd+;(omnK%fNe\[1R.TmI[.ej4a=2PcX$9e&FjD@APCW9u#;45,=]q@-qmb&ZE]%i1h?Uh#VGmbdMD/LNtDRXqIS_;2V?^M"`3p0%cMl\qsYmC=o\e,Ac"5Hc4Wi6Ejr=>/"`gB?]\q;(a*+E<f_(jB$eWnp-Ma<M_gj%e.aX46X;:=U(sW@&n<I6gBK^H5S(XWW`PDC@VlQ:M!`TY>KCrRA6n['8nE"."LSSh9T/<Oi[?,&')=,NJ6moB'AeM2'hJ3Rf=e>1%P>LdRCg2&AmHHi7#W+X?KCuP2r7PC,cd31X)j:g85c[jIR1a>-H;gim0`J/ElH5G%8QNJc($oh6#kWNobp&5"Gr<F@?nCfXc+k'h%@msr+9Wo(8Wc.YK[BLG;g&*5Z[8DkBhgnhS_g8qlj.IDM2Gf:3s1Y0@M9"d\oQ(iulnlF1RmmFTUKXDb)Di;5ocXK\%Jm(la#3jI%Vn&O\Xc."8BOj:u0,^@ZHKCCs2jAhBZa@Nt,kPp$W7tr'bWJ_8cIk^$p)A,)frMT]/"g-PBi)K`Y(Fm5#IVA-C4_%3h]M/L_5#/H%nd]b7J!rR="?e=8M8ggF&)0-t]UE=kp66..Qo4*#3^A*ccp5#-TF5?>+C%sIrD0Zsh#`\,CNqi6/c(A<YB5u+2:fS>B=3!$CVJ0s%X!h.j8"D+Ldame*'u3rke`U/j9'E)(dXqp8_2:VoWq#B'[5Xo`XPeXU=BBB:cQ:a#_mLT^5rCDeD_aN/"aDl'qR=2mp=75UoWWO0%**I@nWXZ2(Z3%;4Jjl/=XU#<.<^Jsb`Y81fp7V"U]OZE5=KUm)`_Wgne;>/A@XQR\C[/>cm$b)XnC(Di&lsrNKSiFLeXc*%Ia\O9%H<!)/aosXDWuO"G^oK-7fG&A:Jo+o,CXrnDha/:+C3=297N90hPWFlRI6U7/GsOQ#_8S9<cj0[BXm5(X/QUCD=rh8]oaXqf<oiPc%'n55*"+"'3Xgl_1-Mgg0@-?*0@nuef/'Wd8cBXKrc%1>23<UCH#q(1"VZnEREeW6b7T,-*/d63Kg2Wql7RTA*Qrd,a?cF^X)WH$F%C5B^goCZ9Am@'bhLAHd_3^_p3l(:']er5n/Yr+L-ZVO1"N3-DReIp)GBWQAbpZZ\`\p)<u?9>%)49K7Uk(#QR#oR8Hhrh:cF4"Yr%C!e\(<G/KlB!:"#)Yl^9.'sRtls6./D$[jU4!8I)4mXnJ67oERAh^f:"XDml5HH`n4G_*.lf9q(roeVFBlT=,7G?0b32N00h701J%d%gg-U93Ch;Gu,jkiB_uEtk[&6'#Kpq`nZTmj9>4^BRu$G;PUnMjgWF)*b=P+XJCV$%XB)c!(l:n:a>;e%>7+8kBXGW;L$@naW0P%fR]=-l_IV,(A9U_$%^AghEgr]1Y3mlaSLuOAj-6%7pJ>/EG?@@AeoCSBJH0T1,CqSDu?:(=j;a\/#q//1H>":%s:CKLD[X+&UIVL%=-jWTG41>Q%A].)/!UFc,Ibm.PL&0f<mO*`TJ;/cb=W/VNYoU5G<bXcpD99rU"CmpX-uCVlnui6Z?k>I=D#CZ&i'^>H)5e#qQ2j\%:=U?$a:3=ErIk:?>%UTPQmlf?[&q+d&$)#dC/e#F#`f>?.\fH-/["nOS'$jS'D2g8Kl$\GS&Z_J-d=HLC*p.+6.8Ia?X5/\[X//(%GL^=en.hC)W*TI)I_`WR00sddTMtZq-f('bksLn;o9m=%/hp]RA^1sg^NO8oC4<Ol3?uh8J$%as.eP!Zkah6bRQ^FDZ^RRb**KGA%iAj6Qd28477Z!Fhm;el3(3PU<<Q`uJ1c5!?H:SLoW*Df-[6;;s0P@i#qWW1$Z(S5-WFDd+<&=8k7758UP+P%lN:eNP8TtWDI^uO)%e/W,-HJfp*nXqo455#GmL%MXPZ<MN^]!oS^&h'jr#>MFkePF_sD:QQVIieOHHd[@%@hR=@.lWZ0\ZXFcpE;BV4aUS47Iu6+[9A&l%[C9b:B-)317K%E'SEbu:p7Ce2jM+,FT]g48[`6S`9Poh]f2CI`J5DkBV0L>BlRj$oX5&h@mMiIcSd+'BQ`_WY[J3L7HjiTp*O@g,%W0B$pDItJ"UF<=rOm680EX&-CMRE!Gc:h(a!HrU87/'5%B&oU?CF`\3?cR>IM<].[ZW^AVI9;gV7TR,$),oqVIZo\BEb^LYCB%%S%8ng<P'NWFoBfgfZa7M%`NMo,0l0uBe]*W:dGEirX8Vo/XNhu2I$5RAX\V?Jehj)^KQ0-<QK4\sgomAfUE&:WFDqYQ!G%b.<YZ/Ao%],nN9ME6gJp*DRh'td.Z+&b0p\VbL1]/RY],C4'q!9@@,nJ%IjVEPkD51R0_k`0<Q<\CC6\b,]5DToT_1o=_Bmm5)P[V:b%jYbRo%I16oQjZ(4L-oA+A27BKO7+gt:?eMC0p7A2LiSJSO?0rQ<_mh2_H)`Y1C7VSt8qFNSePDSp\\ed,dPsrYOOB\84a$S!R9P\Wq5VV8%dndlAH.uh0:VQ]t=>?u'Y00;j!G<I&S?]5KqKeVg\;)l4.?.T0`m2"jS3+$CSQfd\l])RKhX+q1m&X-6[0?`8@1b#,<i[,NbBdMr%)G`MKhl?smF>V*TR]/qOn6H.\\kUpo)0S`D2N7r:m.,S+F5+1V][UOu.D+s_62_1bH*(sdm0<MLlf2<&TK)3)-BDF#9qCCSeK$JN%fr1Ya^\KFOHY6ZS[C>^cb)Z0XoXIe&G$DgDY-b(a:ig`(+<=P>_R<,BB>1CXY?Cb(CVCkQfY6aSfC9ijV9Pu:L_UhU[TVH6Y;3_X%0/^5:G+c!Yo@1o28\;+to8L,QmY3Sq9_0fp;tI\Cdi<*sCmaB?mm2.9<SaE51bWCB4]!Y;qqCF:V]Ja5>J8%-9t)Ut`$?g&dJ?YZ%4Cu-!R:Sb_BQ>I`UsA/#m?,X3&0B'24e_bHc&/N5ZLb)peJR\5qGVNb_rs04VfH^&CNE\n8@(M;W3r,nMA?H(T&aTp.aOH,#*F5T%c$$kL^O#IZW3g?Z66.k]NLN(n7W8,npns_/0T&&BWHlp[]">LrVrlFom+3I[*rXT#T@L-0QKtCgXQq[^S6#;gmDlfLmp@ea\UbY<%2")qRSfOLVRN("(?U6EIUK<9BiqR_U^GUYmHm>KRTuGXK-H;!#<+W/]$RtbNH>JQ^jIAsaX@VA"N6ONHb?b8Tr>p@L\Y0K`WFfu_%Jc=A+/9UA$bP"]e[;bX7Rs+##bZm_-qDE]%*73Ct%&qk6\E5j/Li8IsjXQMq>t)b$V:DPFNZ"EpQ(M8B*W'emZqd]&J^#1!O4R4#%5)(PYSKHaK)-..r!/t"p2!_(Bl45dBqs#]/:P+n%@gO%Be5u66<iS$[<3+RFJn%5t4`bYoXp6`U:7c:Qjk-nW\BtZ[`e@.Ur\=eT%f)lCqCU>k?PL``bqh>HuF<jBI['PNtNO<Beqpt!0Du%u<3?>HoI/V4V\l\L(^3A="D[&81jc2SR];rNZ6)($eV%*5koi7qfXB)Q>%`?Aol<7Z7.1J#*[R-!0iUUB4/WpU[F$"_p:=&UttbKY#:\Z`X=eFD]#:sq?hj5;e@Wp<2[TTZ**"0>C.qu@&RfrZ`)Wfo;q39lCd%$`A`KXZ8">^[i;BL#Y:2Ag1g*9!,kZBiZ4[`]CFhaUN<>U1Rfc#(JLiXKa'kA-?e.=qo=_EGQHrhoC?ilg)'SKj8>o=OG^"&P.]B%AV5_0Hd+'E7Tn9akPBCN9m]UIPb._m<QA.cd+8/dre/-mCu,%u=!Qp4F]I-8e<25.Rm+8:jsj6l6/s\*05[Uj6?,Fo-@:ZZB\'2u%:PdQ!C[Go?r8t$`fi?n"\ObS^SNDotDgGCEM%X8J`+ggao_La+d!RTaJuq4.RB"\e0u98=[dn%bPLSHrQ27J>s6H[qog3bEo`3HG%q:P+MAM(I7X\.(.N@ULckaAnT%F3N0Y@Gmo?!#*J8L2pML++fTl:t4.9Oo\4WBgJEWi\,bkSN^**\0JL<p7;0rcJ@n/(Z8pb9h)k%-#%cBkk+02rXB?Tl!Kp83ul+aC.GkLG^R#LpeK_9s5lCMm@RbBlHqc/rpo3rrc)rVo(XWZ^V.5XbK^!0bNHp4rUO[[?8%$tq5!Y_%cg_Pdqt^)p#9!3s*[fJRT=nP*jnaFNqsPW1hV?0X+"okRLT?d=rJ0:cmU)7[?JYTuE<_.2NQ_!a`LdtHqZ98?-9Jc[:LT,i(%YD%%e[1o+P=4H[cJV*F29pF[9Jjk%;p<Ccc,L%&bg&u7=DOK#2V;]lJjkhQ]=&Zj[?l("->/ikc?\BRk`X,l\<U:1NSD$;\+>eBhKn@u%E'a+f@`RJ0W9j(ZJ*D080Em)d$K7-Z@RqYt&lrE]2IROW__+^36lTG(0uOo-bd#)d>fTRo`lklU@*Ksd>k0>>R*n;86qOGd:)e#:%V-T[uaYlerQ:$\L76)1NL?2.dk0(Cf;df]?nKjE%;TT)bA*^ELgN$G?Mq,a/"Lms&Y_q4/-o`ibg8q``bLLJnXj,S&Z)8GiELk[+%NCoE-HF)J20A!h\`*F_!nXHb>S$^i3-Id@Jfk`U6)arClCU\3I[p^4Qn$an'eTSX^i/Gd$G<&rt97,nUrFNKtfK6SoQ`J=&jlUT1%H$Qr)lsq8.4UAH>6Em$=]IQ(3fM;;"$.gj0%q109/b/'Lf/8$O.W_-sB,:@"9?kF>Ze!$/092@q*=I>-jR\6NXncF4oQMtc],$u2%J%Y?1=u(SVn__%X7gq)Ts*F31(3gW/]UK?_;&6Dr_[*0A+OeA4d605#%,2%on8tW(7h%SP&dj.!)kk?Ajg.B(,a9'JaeBNRqoD)m%ZR?G`aM1@km8aKD,`nUo[1HUZ8'$aVp9GYt,qKHQG$65J67M`>iQA:LZS]['>fabd=^L&C=_QdI1h#?Sq1UfF#XW04$(6T#X`/fp%8Kbo1@3$j,,cWK`KUj_aLBu/BHGM2_6AA.MH;PO+e):n)(T%o6k]an<Qbo],9W1IJImn-:d'GRKQP0S4_WK=a:MqP-Ijs/+.k>W?%neGO\PD4kr&Jd#D,B>*I,:ZfCDCj_sEr27+<^bHC#b4S7+VR0):*`[nZCN,+,+l^g,,rFiZ7_em"uSf/A^Vc@d^(dMf//="&="l<%,Rc&:\I^nW9Km/3=U5'K-Ve3h=b94I@9T&[X0:-9@Ol]3+/bfBi_f(siR#0Kq:4KTfB;$r5:u__Ee($d4`CIh[d1&!2)0[,VO]Ye%T0:slMFG.g^D?])]TE,)_^:[Sg_\r7[;^=%k"EQ5629:Cru3-":'>#VU9PIG.3^656mftV4';Y1AD2l:D+1tc,%P8S(W)#+AC$/B%>+tc!fnisO76\,F.Z;qK@3pt,!>4L/]bBA]M@?9JZj=]"@7o%k3)Kom4Y9\rd19I/'C.,_.VQO'fi/,k;hZ`'_=CU)VCGB2.SG%a%"j'ghR]6@)Wpi8q@[.j9-0DL*bGn0lb)'%7=\qL/+R:KrWQKonR@lraX#-%j$)'tBW<0<+b[4`i;WW8'4AV!p<c0RUe&0Dj;e>Gm%AaWe@gK18D(6tZ2c`>42Z*LWO/3GWU&JGWcZ792j/6ZE\)V4iWiT7]ML]7fIQgj/4W\`i1ms`m'qd&%119S0`[b=Vh6"d=![oTl]%csG(+M)l&K/5VNrQT==eBJfX>3:%FEMtVVCIiBlJ2&.-2?(njQRZ*>B6gY&W4t&Wc"UGj!IuphhJePbl529$`67]4<)5/#>%u-Xp%)YR72'rWUU/0,HP<$qT1=Eb/2LhU_Y(D"6`q/8,l!bH,r7'-g0)Q6l6>obdRF=dDWp3-lWm#h^"9;T8"B<tZ=^4cn2.QC976P0PQ%A#Nm-PmjLJIo%FQ-tfJk.-N7J1t;/Dp5@)[)^VM$ooPiZeOtK$=&2C%3E5gK3_\foD2I;a3_jdfNf>VCe;7fHkF$N^5IERWb^fs[%K)QZOp;d(-X1S>"j`_HH1nr:@!<:m9rk$;N=#RSj(c*?XIeY^uP+IX.!dF?#h@",&YO:<7T9ck,:VtY;YF#(%qbi_dA1UOQGD[26%B(s`lO8o4O'4:`kr;#4QpuBdU5@+9aT;Uci_Z08)r#5FClS$ZAnhj`Lmf<.VqXET0HiC>IgR_@>7sX4Wr?'_J#hL]pY<2,*%Nola%<GuPfRojMs^el>C0&WfNZtln@VSQNIj,k;IW+cYVq4J`/7u^2%mB=?d;(5$6&TH7@qbtWofJ+lOLbo5S2+m;$1_&$)rc)p<-h]##%r_75,Wuibd%djOJronV+[.ri,miR"kkDSHBM\#gb`RX#>%IRKup?Lc8T7=?JkVH*(bMOs:qWd52mHqVFS<fd#gAPW5=b-IJ)S,h,%i]nF-b5rsjdGCMP/3`pi8uB,r]>a?9mJ^>cc"RMkI?O'<oS]d)]hjiTpu7d^_$+lZ6Z8%'FIj6QO>!c5j`_=grhkT+-@I%PW4m*C%IB`NCe+-H5rWi7j>N>E=5%$_]eCUBOYSE8:\c14</F;pU;Jd5Aopb$nhoTs*ojLDGH64I^Y>/_Tcm$+)LS7:#mDOtP6URL>JVgbe%oXW&(PK@'_UZmGQo4aER;bH"^:?Hdrpc160iZ<eW5==7ZQFchr-r">.3lL2$3_-\RVl396.d%@W'@GJQc:*1%:$*Xi9IH@U7jiF=%V%aF%A5;<@T*'A.Gc\XbV9`s+r%,P-Zu7.4K^!T1kV8O(=Iu0F*Fh&L@X*i=>Pqn^Z[e%!;$Q75$0UGLH!m#f/8)kjbW)LQB]H1S%]onMlqX;`4Z2]+Fp>h&_YNA5\NB8Ahp/kd"`0q+r:.3[p@l6"KMrJq)rT6M5aJ@+?Bod?BkC:pL4&I=[WDa,9#bqf_G6m0RRY'W%%;%J@[0K9hGHRbj^U-'"[:eV%F"4_B>#s.N"M)T(s#M8fcbaGDbo0;NbSP^M7lZB4ebR'F;')"NTC/-%9]Po'Gp.,=!3=R@KE%l;&%_QdET2eI=dc"C%/3MRP5`P+='IlO@ORW<@[[)9-#jq,Y;+-%)nc]PU+kfMo-&BD+A2E]s"jVaHY":K7i+W?,JC/>&lXA<gkdhAEi%*?J#K7'=,g4.59:CmdZD)L[QO6Z@)^NNU_?d'0EmFM2jJLHCDb=)Odr:dI4L:oB\>;a!(g'9P@]`]hdKWB58`qE0facQ#O5WS?qN%$%AuGLrP:o)gL]XLRl9A=S38g'AZ^r@nq=></[9j[*.I6QZ4k0E)o21S=O;Z`'\`YSE1lK7g/j[9>9NH^Fi93[I^$*q"sR.K6QDP%0@k3gf0[)V'@sn3H$XA5m/PEtp*?YKS%g8&2NtlJePCDH4PZ[#s.t=DUEe^#mQ?!t`U+%sXq*1(5Ipgf@I_2!c,2L;A^(j8Ng/)g%bOso=e+_$M4?SGSr5#9ADdF\;hu=E#p.K7`qr7@n2uD^m_t2-^dRjOAO3]SjS,`Jns4u!2-WKpG6QPp#A,ki1^:GY3^Ds;DDng^G%lJo8'5<HsSp?GMra>`W7?I$<8p;tS0mHr/BO&p87^Ua=IjLFX&:J#U%k'P09?FkEnPG_2"oAB$$72PK;J,eZqFN.NqHB>YWDfEn/%R,udZl%A`&IX[sW*Y3H%T3]7Uq]GO@%r^@"oD.k:rjh0]p`Tl$&,5N2$-7L@,8&2\nuJ+HkCKcHGAeRpcpt#/8`QG*aJqMZjn`0E%p[q&Dp$uV,]",iAXr`)@f73Yhok+eRp3cDHs8&V$rS@%>YFZh5eb?memr%Tj_2%f:9p4BcIkOOB^]23:kW`o\Q61N!@ii;]r6sEs%mRO=ua/a8;\D'5T]oe0Ohk,GpgEuF-e`4o>K_/X=T:^Q?PP@)/_nRN5riW`@rr2'Rc/\f;[Q.gOTqSF@a.%!RSh\XMo<$oBipuWg%'f*N8M1=W@rP^0*c5=m?J!qJWDtd%7?h4@orpCedLH4+=h.:7ZS1Y'(q"TVOL7[nndr,s]i:-VN_N'*j(C9HGY+Lh!n"\Dl2uFX;%o@kM?LrCf!gcf!CAcLokpt\0i^P`I!L:FYEs$+U/^Hrb7QA+E:''Tu%Vf.(_2m\$1[l;q=T.ka_jK"'&a6PlQmcufge)?O@HLDR2%cRA\SbPfuYDhcel3c"6AM[_mr/`be+14MHBb`=]$T"fb.6H80rI.53q%&5lZ;lm^jhgG1sqn6i^_F<uTrPm3!ZTlFpRtkYH%U\\>%IFaGqHiLr75?^96r,tmu7Gp+6CW/./^YI?<ca,S1P9rNT*rq-@\5;G!qP55MpW^V+j.#-f58hj"+.MThhNm%^mb<u_g\.+^nPDB9%hqcfU$,!b/0S/u,rT;&BSi/[k0"h5^G]j&Yp.@l*rK@Y6o4If?o.RMDW<kF#^;X^lb+!T.\!j7)'/rW[WM.`&0@+QDSsNej4[&6U%DuN0iJ?jZ*@\$gbGimKRe+`<Vig:hA63p=$V:9I1oCh>+B_GN:2bur:];qjE<!6["bM0'Vh'HEVZ<Y(*5Kr_6PQeX`G%Op,X.Obf%FEqE/%tE5=5KdM`F+n)";^rhNo'l3tHZQr/54AOJr6&8-4[2..V(o]08)rpiS$u&uhX:CnSG!senakqUJ,?a*g->S@?U"ClIsd18%i%/)!Rd5aL2u>P3bHUp.Z\R^r\';uHpCFsLjir3J;_i>q]0:\VQbOR',&si35"])S&,7<8MuMt;\oXDL5AegQDIlTD^]%j8_<1"u%l"Gon?f.pXHp4=Ms7j]:OK+;TQH"EPKYf*gb'Um=F8U>=/QX@\qf2/CnirnAMQ&[$n#?E$n?KnfKn)o<"2f0%Eabj)QZjI9K"XF_%p%%dmQO=mU3!YnEI!qm$f*`9-s8A\EMjV[C-6n^*W9!l6Zi;#WEL;$P'Yt$$rj^&6,0%9[Dg<_(\M4k*q[PF-?+=@f1?NrrCj$h^%N4VV`W,]N70NVduCR9*<.?o`E3PVYjc*+;ed9_&24%0#%idL6cb^_lT"3o;oS]ha27d><iD*rF5k&.G.r,GU'OgT]8YFq!F5??bH%oF+^[\&facoG9M(]1bCoKFB[`]SMrcPLYe<.aphV@NiPHF'aPG;n*)s%I7eG]J(*a>Bc43Yjak/N(k,AiCO\9I.G/.c<R.VA/1ri%amsL`UQ@i>M()`_*9)"F-sf/9<[C==+o8#d]hBs_@(J&F8n4Q'YXniV_YRY*]5V2:$j#(m.H0l-%l+#SBJn6"7E]<>#-Mt:B9#6N%a?"uJ7[A<8MiX![&p0rQl+G*b4!GTu"Otm(:<*]0BPjPtblZtIAJ-Ir,BT>/$'Z)oB'i#X%Qt-!4(HsmPf[YAo#<'m?$'m-e-UNF%R3JZJqMUO3PeEHYk>MjrF"HZ!)q96?lStS;^t*2b*EJoUC.fL.-#ZrmUlkHl53FR]n4r!/9@qlro(Wo8E*&DXT/.;:UN_8`!M,.e%\U]]NiMJqlS\-*g#^Pp(O_)WhZ0rC/[$"jOO#Xem4Cj.!$qQna/IoA^0c>2('Gg3N^d9(#Y@Mb/d0Lc;,kB(IV+m*JK0d\7]Z`cG%0GcprZ:HDUJ4jedZ!^k6M9Hp"-".iK5F9f[4cQ@'-l5Vo=!/PNl3I^LP*D07Jr##%ji*=N8X@.X\tu0<Jes4T70#UgqK^:_\3s^:%lCND=YKr'VO2NYH"qq6,9;E,ed%nu7=aFKYR?U.8KIC"N"Z.7\;$c*nTUDT1,n7d,nNl.W8Y7c]`)`^BV:t:_#,eL*,+K/Ua)a#r%Ca$2/E3XNtS/$iND8A^fb>]fk@"HDqVF:('9#SE\!0KkM6V-^p_9m<9dTsYCa`C?+9n7JVJ5o,U>=$=E>slrKKP:c*"/dToafMFY%CkB5a)t?7o-HHB1o#`dl<?4M-'Zlb`<kBIYViVE5btj(3Lor@_BKF2jMl[nD,KUJ)o$BR&4cu"'Lo>.-kCcgOMqU6&K?/oXd4m09%$-.(P7CZ&mN<#:Q<aBD-SW=*Z<D,1NYm:Z0ULYqr*,OOd]Z5e<MC*p#:4u&T/>@j`\p94c??A4ZNV"Q$&p0rG/Wh1AMF/?G4fD_\%N0Y`7n9gdbiAa)$6jS/sA\40UiI%QoQ'5ha0GTDY+<Mq_EJ,N-kXTNdBYs%k`?EE^oh3IJ0CW[X!hfJlnM6%:jAD5a(Qm56>K79l%iL12:=%+8YBWQ"Q%k'Xj"e-JA!DV-1ntET.&12-"4C"P`E;1Y>FTcLn'-i$4W'E`s)<!44Fu!4.S=<"]_rW;I69:Nn;e$>X[eLth%6&[Hc)bNVX:h\PcF:iScJlb\6X9^ia+D4]<#ff7SK`b!].=`na;(kbtV!)J*/<%&WJ>ZHK;rFe*,q9cQX0n'9OcdIE!18qj5>s7N%fqP%%=()aK'34I.[D:0F%tTQ4.L'.=21bSFi0101Z[,;)63B<(-&!X;:.X<9rh1JK=@PEeJGJDB#t@%f#d*%#j4R/j.)?r/n8Est%7#RR_:`^Esg$;!3Eo<sOQCe'9P^t4OOTTBGX%ZhD7i+qFMS/En*jT`q*(8/?bQ\Y?jI5@[b!@+)O_WaPU&^ogUdillF;Cf`U5N%0%EAN?bA<<=;H\h:tKYs?>ZjsrX;>gp5@nI2=kY+V3/5q);_jk0j]FtrVJj,21ieukiNC`dD%uD835eN?"Ss,7pJF&fO#.31T+Tl_$%+Hcu$J,hpYP^1st[W&(+cl+Zk3+5sc#AQ2k(H>,cZGNNm"d24=F&n^TOj"5V,Lh9JFS*,^)j';M#rm'>,)Arj`#N.c"`7[]$Q0O@%9t=IZY_Ah@ZMYCBokm1!/=@O+JuDsGSqko_hag^g[]8ZH7qg=$MBf*R^]nCq86uN20R$>#1-6+M(>5[Y#gGZBd-B$eDT*bgicu(H%;4n"VL6o]<MR2S^MB>gi=Q6-`'Tre"LcTKEBkcNH>qZig'rR^hi)Ve]+=o$8Q2jDijkr!6Ln]DD8.X:tYg5(H.cbBm#E["8<<6Z_%(2?E0CWRi$%/I7m<5fDdQ(_Lt@kBh(AVihZ.E)r_JV5EUh?"B-4BHe[VC[9;F;_de[b6jIjfJeYL.Cqm3MsSt'?M"Z"?R;o$4i!f%@q]W\K^03U'&T<4@h&(B4=%@ur1U^V6S&T3#'9t>L5[CAOS-Wo*(e`=M)YcraE.N^k=ni03(U=TE8hX()od!J7i"5kJ9Z[6is;RQ%);#"lX@F*O1mGQ/!Ytfm4u&]V>RH9]0^rX'7^u5[UFA/=O:!J"+T>+?+Mfl9!'Mg\h^m^$,fXPMM%aTbLW%W8(Eo&3SB^65CG-/+%k\W1^8qEm'"2roDq#M%fS,--18cZgdOqj&]knlKL+t`1MiBYhgLg*mk3AMMS!7<3NhAJ/m6ZKuR:&+9FbUg#>U6lhS=KW;c$np$p%%Ucp]Jjj[Y2J9n4f11sn#Ec)K/7Nl:\&j4=\DI;J+KJ+05YNVW&@2Ta-T[>Ua,-NAr)?@eDj6/n'+'K62_bHnV"@R91pKt5P=Fm_%%j<HZmVdWJj4/?r&7bgo@d/DS6[(T,,moreRi"6!%$88(]i8*#$+)L_&3?W?nKF#_TA`q1R^%G&D+]V@Tu`BFLhJUbM/ZE*F^Her%\1Z?$L<6sk@k"[sAjAbN7"[Kf=F,t@?(f<#11j,a[Y86sAsm7=3$,)KoPc9C!TG)Lm1YWo<ng;I&E9L[4Bg75E#Rd;_Lk8i!6l$3%7eX\0!/VOjOMu^W"@uW_(+pnH\)Icq((M,*Vp%J>=fB#l52l`s!d>)(!fW:Da%)kU6:d>cJP>O&2PCC9q2;G\r%r4LK23sgE'Pf(%#>RXR#OYija&`rdeC0__7dioaO^h0t?koq3JJ8[$+bGYPSrDIdYE6;N?4F-GSH@Fk_Zce=&eEX#!VI6dH=[SKH`A=L"T%c-)T$YA%4K6UJH8%$R!HerS1?>*+f!RqK@M$^M1lDPS&lV/i-`?)ICh`rB&lh>S(T)M`84d4_!ao[c%iNo@@"20?'@`[dXC)U>7M.6\579Xd%?2>D<;F2i=r"Th2=`sTN\4W,Q1O$XM^g_HfndL!SiAeJHd4'NRCb+3LY"L_[%-V&U>_uB!(^S3g(e@u/[R20#9mha)bM5SG_TGD5%)[/ZTP;4)N1AlU+MK,@=MC5I`Gh,,F:gb]+LGCt\87r8er;kcm_G2!d"OGa-87#j:%OAVl#,E5H"cs,M5[kLFW@b?%f*eT[Vb)gK%dU;-46\?h,T^">M[P31BML($$@#7[7DIFjMk*R9i!oW<+M.W"i9qT7m&F,Q)SIf!j-TYK@[0+3?lr=h:nY(d27T-^YhEOJi.96*Q%15X(4W!aK2!^j^rV$P.(BO<Gpd5KuW'EGFMg]Ff2DY44Ued2[$Nk+?_@3L;g8/i`2Lk$oMk"c:f,Mtc#';$U-9Ye&0B]D6X8:h:\%TPR&0Bo!rWVP0!.,W=Ck)Ag5i!9eD/7gZBY&_ocKa2khkq:f>HFAF$,!LgjO0u=qUGjQb5UL,21)[%=QGtU\mp_"?N.\MYh/1Uf,%EMg5e%O;K;\H*pEouUb?O?*&8)oG$RU1m@`A*K\#IO5G^!1J';*`?CiNMN?ml&jOiC2frUaP!0;i'S`;R!=$>3goQ*"cO]Z]^So2%);ZUuF,-?,'ad6*(A/,4cmDI#a>==loTV56Q/DiS$E:V!U1D3TZ&.t5@91Pp0.WU?WDEhNkqS6L"(nZ7V+uPB(P+K'%jc?(WkZTM%H-h4F61Rr:!Xo#HM('$jLm=-#eH7MF;eRm9<MZuq_.a[F%Y3c1AO,T_WWQXsRY8^N#=^r_JSJS'AlS/UdUL(_\lT;m:F2r_a:lgT%#cX^'0d6WT-PED(!$^MYA,R6V5U<n^+<XHm_'6TGg+WC=&L!^94>\e'!-s4d"#O"R_\]Mrc3+On<3?OXT.LR"Ye)-9Wt`B3ORR'D%H:.DA4#N];ZGaP7r8k"&lMVDRf>gXrDio-q3L)%)NL]4A!MdG<Mdjq>j>XA&5s6[.<#P`[NJgO>X;$%3\hdenXatF*9p[SqR&Lu:%I-RGDS7mrhUM<ENg`Iald:=;e&dc08=\FtHFtmRmQp?:BiWtn[o;S1I@T#uHXU#_DRj;C5PgR9S*_A9ki*%;0TX,V.r&g0Vb`R;i%c@sXTTKR[,VC]FKDc!;E;d]Y^0P@WGpqU&aI%[a4`$Omq)72r5=hR5dM'-J3O[c>q-rG^9!m$1A@U2ZpDJO)HI2\YNaOh>9c(aHj%W>\tq]!MgcbX0"i/k8R>LR0?O$.)<&#jO!U,@]aO`hGn0$3sd;9J?JMG8+nUm@fjH/Nj/u@@I1.g5'5-_A4@]XDZOCI'.37GWPY0%+OhDTpBAR-lE>`#2cL/..+/fH"9sg>OD,JG$UFB!!$Js$RLnZ(&gVoZoaTZUHA"$cQ81a10WDso7D]3#Y]'g^Zkej29QMR20r4'5%F"O.P`'/lY=7O*?88OIoE%hh1)6`Ab2>Ie1c$9C:9#5!eRQhAhbg:,m_QThKL!>2nA9D)`I]#@tEs<:(ne;pN0ogq39!2o.PMllg%&TJ0_'&eTULJJ,k"m1F,"SZ&4@3o1,4Y(9aW'UT:'q7i]0a\2.9`u)rg+De!@A4?=BqcA:J=UJV8LViYTF6t6pMt4U^r8=thOOdd%<8o6(="Is\2[!+O7h@m^2=Q'IAmhr(qALsk[K\nD8ao7kF'2B))lcF_I>7jfd2DddhV7/q68pS%'dC>/&PikB)=E?N`Eb?3o-P!>%Ni(q#i+s;mS!hq>VEZ6j'#1?5[W8D00p%G'MQhSt93,DZp(3?;'1^gtVS\'hMaS&f26l@eZ'dAAYEm/rJb@4=-Z^CZ9ecpO4s-0C%F%Ja%Brlp2b5gEW.NfZkJ\bD"'9FVTMXgo-"or7BOf"6f*-s).*eOL(?/Rhg,7;+=Aic&^`l9i[2DQX3$n%7<1,jJQc:u;UJgMc<%RD+<Gn#P@H5Xds4+sGZQRbA&TSmcNd2M`.,Uei?C5^:)\(Q6gtL=ZZo+c`5E:lS%Sm!*bR\,#Bd1"HcKIYXbSm3!"_TFWK0LpW$q%mGSp<P,>hqVVRbgE6$WM0h'Y\@6oO]Dn1KFTY'%^''q_T)L!4[aE]$iEo##p^ZFZI_/rH!\Un^Tb\5QJAc]i,q'gttl?Hg.D6lKN%_IlTqKtn\&GQpGiKqcNDK4CBV'9H\J5u&[V@SIlk.mkMHflGR^?n[-B7Eo"JqEp\*WB*$I:D(3:9EN+7/Woi?E?u?]:a!&H+S`G(%=6'jrrJoYg@YdF#?'n6Mi'ML?iiRpG\M\(EL<SO2B:YOoU5R76:a6%7%_h(kSJH<L[*@n6!FW.fM%"ukFptfn=;'(u2b*DXRQ"Y.%OD!^h,9$d'U_S7nK7m)%-S]=fga?!V'@LoC6e%"rL.Eq5^`QKaQDpg=_ftWOWSk%:H,;l!7kBAt"a9*kBFNNA\3nukQ(f-r>eeH6%ZcQoAP,LhT!36)Z2pYG?S?ap7FLeTqD9\`q>]F++!"h8\S6IE)9UA"gH2%H/a]o:aZ-p^3@,j%VqAPd%%<=rV]=e2)&Q*Xc)=7S:%,%lR^"_Ese@$UC;A6A>kXE+EFbb\f^e8h1:AKBhtC(hjNIF/2+7pZYZklCu\oRjAt>1/,+8USf`'5gc'&m"#C9@a4,8Rp-RIhN.a%Uj;s<Bs!=<'?`m67O)q^"lVTE%^\J/:/1@k@[[IL2"o:!Y63r)l0Mr&Vlr(.`ksKM_iX2JX'\BI$sc#7Sr+S$<X%nP<>`.b$]0D)%!:DUP!sI:Hm(d@t/BRt(3r;N/ZuETpjf>kCoE!%)CUk%!/2P)s:N3mpQje0tA>B@mV1&rF9_9naU&,V)^<@@.RZTe[[$787"JI0.%!'j.`HB^B<<21K!(m@tK?a.EV.g)slgOBJS=<%lp5:m,;A[%o!Qu/=m<f+_3iAVmbE4""+hPh%5L'!TJfaIM@UA>*<lP?2E7uFkp%"o9u&LA3$>mQ;DkO,3*g%\9+R@j2'ooa/kN_<o_,o0bp9!%=%_C(7(/0j<rh+H\MJ(Fpu=Q-bo3kZW6`l6kjr@4M%CECN7<'G^&N%=0H.D"boaYi!-Hb;t2<)3>\WQbcTF<DV-c="@T+6YQ<o=PWJLFCu'";i#HPi];,YC5T-<eJm-0&j!g,ua>X^H`(S3U?U?qH@>=iQ%[EA7WAS9h<@7:Yb]ff"aOF!J)S*3Hr6&J)S\Cn=Y:&C.h.Ie+YDX_09NdU0'j\HuOWY]-XmY-"i:Ek3`Q\6r>h&^WZf_%707':p&%97:W6eIg?k!Udiph'A$%$)'In@eR']*4kaeY`CKaI<MBr!EL3`*tAS*hFoPV=pB^E0VaZ46ZN=?Sba&0V3&fU=Z:!$9ENp5;kFa)%<)Ojt^cgVKgMEiC_[;sV$3Y%K;N(/kC8Q#h#up7]]0)!89')eHS(\X<(dQk-8$NH0NaWZ#eic7B&80bih8Bp]K2dJbOdkIV.S"^a%/>:H`"+sj<Z#+!fBQi)7g'Q?\1;8@?BOsR#l:Roe=.4n#E>'Wp3Wcf!l#rja5ZquY+S9lSei>E(Ls-Bc$*maci3Hr'][iq4(8Vsm%X0ds\X(5%7JSb\DZdI#dQOssMB%#*:Zk8XXAL<"[Rug31RP3/?2":T(fjHDAM1pj_Z\-KKDR^8r.<2H(Rlm=d5r3p+*n1QmZ\,>O%^gIbZISC"b/QYUg0iBEoed<SJC//><Q,/nYAkKS<C+r*6FqkTSM@g'2Ap+V.`M]pVNOiYb>#Dd8WEDXWfF:V:h=oI_E-FNF6Y'5X%+*EJg,$tL=d=`g'qM_VVZ0I/P8^n`S1m<blUo,DDC\_6Ff<q2K$i),,5_d7E::$DKV0PCZAO;Zo>-)F(d:T>%d-:\l^mD.rCCh89%JS(ou9\,kqjbAW1f<S-O!^',nC<Wb:MDhJP6T&J4\uZKAD/??PicZ"m+PS%6!ea7@cUI8-eS74c%>"hfpIT@'7gZ.K9q7@lN4Qic%qNOE;,Kh[6dumcZG*r,`V:+5,9EJ3nG^<[a1n%7&%=Vk0&!119X3$l:2Q^(VCGMgK2?,OBK,G5@0C%>oDU8DbCNEWI&h-s7dY1$W%&/@GeG@e#O>K<5?(_E]Z8m8aL8kLKVa3%Z2Q[:9VEg^+5A!oZcH?D\m,Zu0T8?VVq\d9XFm3aL-%%?UjW$SG9@pE>@\@G2'nht1+%Rnq8=Tqka?OANEF8n;>Hpqfp4$>F4Ld2K#cBS?j*j".!.&h+&]L"fm(CpWIFEH]aPCbmrRdD1iT8D,CE@tUT.GS?0+d:m6k`sGH(%AOZt4,B.4;8PA=ok1"]oV\URbeAj6V/rF3GCpi>qEL_`-U86HdOB2,&-.YhZ<ku\]:)7tJ85r*>HaS7Ddbr#kRL@N$QHpd[@C/#L%Pa[3o.#9[\SBAE+AeM3n$c]H*"djM('6_U`3hpZ.es(4ZY_?+mAMTc;/[]#d->8lO[3i]t[4G:apJGG(aj`AhU>(J0cpSUJ5/Frb%6;F/pVntbHC0YMXf=fQ=>iqLfr4tI)h0!,H=Gnp7d3o[5G3#eYI&ma%$HQK(!_U?;*#=AI;cB=i[0^$>@'n:4+LhPN]9+apb0,u>%p%f]`Ad9\EcCEN!A.+F2,QM5NgZa^0^Aj#5.bn$7f3HS'A/iqsn@I#M))qeN*_:nu/a^BSq1=i);PlqlYA(UlE^VFV!n%gP1XP,5%el\maBd5EadG-%bI6[83M1ZOSU^dngZSKmBTi5J?5M$?#'HD,)";SV+M\GDei(gR[hXMbm^1Xb%j(]U,d-@OJdsOF#gQnBsE^(_q%LA-]*&$t:k90?@/Kq+0h%i`d0?";JaGM_7q_6lPZ'-"j\3>ZMJ0q"0Y0$%)rea$9+*>4U*54p=1&;qL;kn\AZR/(,EdYQ]sD)62+%("QV'F%B<j2Z$#uh,.&q(,F';BpE(mQl:Q/oOsRp<&YI'b1S2B1CC%/O9\RIjDH[gGb^EQAQIK[";QgLD:#4TPr#_pL(us\1$kN7%De?E.nd`rXEB\PpKmmVGf1_LhZr(*1*4\@3'NOsA*;Mk,7r%$Cb61UV5*//c<,7Lk^OUR.+%_&mMV6O^8g2ARQme!N\Ccj6h(<4I%)o':-PupqbS23MTlrh\tKglTu<BhWQmZ\EfA*$Q-kL:[:3?@sC>*p$:DA3]koplStA<YJnlq%/Np]i-!@c)c!gD]dZU'honR^09R%f2S<)-K'(JeXS;p>mN3kQr^nl^sa_G%P6N@?.!^1j>A@\UAUo0c"r=g"-h8Zk'qEL0g%d%4<AH+d`[cNBTTFj75t5q7]a#&B'tHm%BV\EIbGO^?3B`9CP#f'>?k(4'\j;d04<nPHVIui-1G]r:Z7Z^6$f`+.r&e\.KlmS^fAp6&Hq<n'gK70NW@NYol>/t.n"qe>YSk5Q%WHbPNX4t4-r4!K"&i(.V^uht(1pR6&_7;tgJb:=+9h76[rHV-4Rm;60mJ$bB=qo*(C'-Nt-rao]#3S;<>nb]b29<48qKVWTC!fVm%2Do4q\QdLHOk0BX<=@.n?4TS$FE0g(#e).<ce63YW9>[-Mj6[?/.q"F5C13nBg`cTUjd_?^?$mSWmhp(#X+M*HA?Oc8N5@"'n?Au%W*+'of8?hijdi@(SRbnpMa@giRNY-f=US#/U$t5qF,tM=s!L</T75GsY^\]To(8uH':(VKlYokl_;SXOSOD$1GT?D"ct!=gK\Zn?%kL<utW7?XAN[PddE7<`lJnkD/HKqQ!Jr%jU`9=n"9[&RB)A#TBY$C)L-t<t@Fqu((@f]ZliA8EMXRBU2\E,NS":$A/k(XG-Z-B'L%Po-_L\9>q0lZPN4a<`G<A5!%p2I]V=);itoKOq613JXV[?o9*r/ju7#%O-dTO;orJ\>+^[9WjqRlnPUh*hCc.2:r5Up3FRl"bdAs%d$T8MOaZAh]D0+Jg<Lq.!h*O>`fJ4>ZnR>,"EMQOp<6Fk*pps$HH1TB'Tnr\H=DDYc0L#nf4"U6Cjb5FMa[O0\-p0B@Pu_-%2>1)%Ce$bqGk`!7ca'XNHS@;6M=+MW$G"Zj6oVIsgeFA;7D1*iRaL?((pFH6m>!cF`mj>a'Cjninm&0A,L+dpTbUC<TE02^dX7ie[C2i6%.0LduVe0$;Oc<sUf`[_@C!pN<;T23plsr^O&^/XrfZtu,mH-K<b8E<kc(]Oqbsgqd5rC&'-U:E`1d765RHYQh*thD"Pu'0!R!L_u%WT-@pi'JJY,e:%[--ffD:aXbHa:c!dWg@[DKJUJ7%l_+?)J7FQJ4F=.;jd'GN";g*C%Hue87Y0)j.9nA'3ou\lGCk4RU;R<Z&1N<%ls^?B]^?(C6n-oA"m*,DR_:e\73X&9YUd02[&=/IYt,!%=>TAEi^i!\>"fUaGtjSm!'c2N&6R8RF2AaGG<sJTZo+eDkHNEgr?T0(%cka`Umr)X4i##lI#85#3Xp?DM*n*hQO-`8!^`qip<')ZPYGYYp(*,e/q%,XJ,)OTHIokK9ETc_Wot#Qa?03,)MOJ\oF@B%s>LC;*%8#.R$i$F28`3'9_6hRC*K]Y,DEW-!.dTXX#'nnD[S:6j8hs9q`)fnq/+W6L\p8h)Behp\q[1s9=,'GXG`_bJ*O\KdEV'n>kob'*H%RbYu99i)C%("lKp]7qhuO>mK1XmT7\L]J,\n/7;u7jEr:L9Bs+f2nAkCPS(ELp-o24iUs^.UqEK#Q5mq!\cMpU1efm5VSWFN'V7Q%\pC!.QIAh4XRNb8JV0l,<PXPjGm#.Y=9=[g_J4>"O%!]X*X0?IHK<>d]%hO#)ciXR0Bbn#!PG5MHpi>Nr9q^$&j^gnA6"^^"gKO)%Z%<L,LQ+Z?JChpI[9K5Vm0L?,'0mtpXuh8tI)C&'Xj/M$oAiI6i(P*f@3.Xa4.m=SW73#J@aqCh&HFC3`-Ps#GlVs9AO_W3&iO-6%Gk;[tAdnHu[:+pf7;/\-[?DB(An8:4oXK:emQ##&@3r$G;(hDeFecg?H8HO1_^:$>=C[Z/0ZLI&,T\jeM'^s/e;o`I/cor"E7BqP%7?4r^,S$NN(ht@eVb=b(\\e:rS6J;CH+H[GcS(40iIR0!85cI=AOR6S5;YU^9IHi?JnD_oC.[fnV.Vs,6+P,Pm9h8<H33&[O@EL#%^e*I#MY^^@+Ki`V;.77e1ROiO[NmN6Bb@s->/@7?fhMrRA4f%`*]q<KS_dmBZjnnegc/fP&rK'9ab!f=1!T"=KmLD$'p)6Mbk5ib%3O=/UbX>6gkEDPp69QsLE`I`&L3d64&-73t;Rdcmhup'Re)8pi*(<,rj7)a<%A!T>8jtm)NpL6&$T\VMXsfs4;PQD$$c-\:2CqX*%or%PbmTN<qc!=+:"?<h$d^pA2;9+P7UXuFaS8\u:$tt+Zok@d3l,&5ETqGQ.6FAFdV@aaof^:i8KBCDUqD1R`q<tZt(b2b@eD<Mp%24&Rm+FdebH'&HNVI!k/U@nYF1m,1u3`6'a<7(13MRcH_#,Ck>!V8i&<+e#]dcPn.dl$C^M`sj&"/A'33p\"9cd7f@AP>3Yj&DN)%bqV4ZeZ5mq9sTTGACRK`".M)sgVgIX1PeO(jCQ]lM=tu<5rK)S"R_@TQDUmX/`9#<;I;$FR/smU`;J?u@ocs$Rm;k^%*]=nV<WAe%Tc3-<d<eXu"QdH?]G^F3T")ZMh,(,8b#/;*49lR9^puoh7:qaVLDX`N\a9`#Jk+"D:m@Y`Y;`<R2.jdJ34dG=+K'GGnCe:e#@gQH%,.!j*IV8gs@0?2V%-)13fUnefF,gVP[Nn\5Z8o8V&BXtAK$="#YUbZZ#]L^@D?*]%nWjM%For>]&X1b1Bs0JbnI#!Y)s$Ylkuo6F%Jc?V7TMACfY$_JX"Gd/U:U$^0:68:4g1#]N>N@]IM's9Ah,-p`#/)'CPBre'(TeBn"Na91hJWTE<;.X!b.Sp$\-@JMn*1dO$GoOB%"&W#=\3Bi4'J]@^n40S),T+=.@M."l5Qe*j&A0EH99.^-+M!JY<Vd=ObXJ>VQ`*:6oe<HTZ10A]=:o^p3J.gZ`>:XodU9sTlU%.O%doM>B=4*H)9@Y@K/6)r"l[gJdcd@\*'FCRD8`s(P]NPDJ?EO<0f*`.JI>3"[V_^J>Yot[h7F)_Q`2CZph;MTAMp,h\lOJL[K:DdF%pBT#pg4Qm+Y]-.3(g>g>:`kF)<S[\OQEUR`(<22+"[sD74Td`iON576+aq'Q0Lfk5K!;/0;]I2.7WF?<!Y72ZJqaMk&KGacHJ(VU%gh[/ON$.!5nTk2/T$-UsV+l);<n$S<!B*"YJ/\U7EV26LMSbYF^!$IU0)N5LTHIoBUn_l?&![D#(mK,dJCD)%4fkQSTO&cs1H<,\%GY<dpY(H6c^dCr2<ac3k5VS)EfaC,>KSJ-%#u"d*H7g$,Znpc#+kTc2MXu3GcM2[XSSS1MW&^do_!PIJn@_QED*RScEcqGm<[Z?^%7PDC>'=N57fF.aCUL#T-K-6V:dpr>sd#CoGPs\e<"8%,%Y"R3T5<8cZX*T/K$(RE#2Q*(pR7oq.D?LCMej7rTSNob7[=R)mVk>Xk%3"9$\3J%[#)6I4*$_!pOA6-U$PO;N^MFVK"7bQWXE!$Pt[Kk-/:)+:7=6f=fR4]L::EB=#*li!?JGNdh@Y$n`bb0Lq=f_ADK'"MS%b\NTOe(AK,ZI_/?`su_.UfZUc+D<5?7,eKn<7O@o<]9$WFTCl-LcdRT[h22mG3Ga9DWBrcd!23A_>/&#c@RCfJ.A6jU*`N7"%AWa%>kIj:Js'714u@!'R6-hY<<q6J;Qph$LMRJ1;$Y>R`q6At#O+mRR@;<35m&';/[[SHRYc/BX'rkA",@</_[,Zq.%%*\"3*HI*ECQT%a5a1o4=QFgYD2+D<^(X(#=,)YZ$J8o#FLh*n"<6rf+;N(X?)2N(ieN,g@_PD"+%Qum]N7<KWg$O"A9^[$"^k_+RaHnHQ_c3.;l2%%L-lU+!Pjd,ZQkG2N_7V?V%F>;1C.4Z-o_?[QR^8\k$&\\Fcb/m^E+N*lko\aN-0hq4eb+BY58>,L,tptm=C=Q,4,pOr3@3iQQ<m^%MPSRMk+QaF9UsOVOO_5SI#pdAB0f(*o7H$%i$kUg\t-r,$_#]="NO7=hA#.mk'$p/A'8&ckti.We)Gd51CQ"E#_S;#B+,"N;GgTt%ggN[94tQ*(q"#OC%$sQ@$E,91bQ'KPlN,S!4iO@>mm.I4N4H!e"%o"JMNo7$X<?B97s?30bfTp*\GKsRWD?sTE!ptlT>;6Y1HU\S%3!V<[lnGE,Bhg"$aKf"A539[>CTqf,K&-cW*]A)3iE:7LU!CK/B63__:I-6(gQUf.SXYD&S:Q[G*b.9N01p7^ml`(9_dhBYOF'j[%O8Tb@S.K0jJ.6#I9%eGGpDGkOMt3oZbi'D&h>qUQ/e=`X7t+L`lSET'nHleI15%=dYStCfYSqsE1q-K00gYno=(;\J%',=)k4McS%@a]Ul+`epX@4d_[%!Xkn*6SbP3LC[l24Dq;"kOt6QKsj:128edc"(2!i7a&Y"FL_n#k:h5,8s=@G;8cX7U[V:TSB<8`OHtoE"9CR%E!U5]6f<k?>D7A<5mqK5M!HDgAloLZL:PpgVF,ZK1VdaI_eg3+fZu/fQP;MLKA4E2LK'H<$ucDANGo.(2[pqU.B<noaK$tb4]!hu%[n.W37KX).5<jE'G".#Jp*^3f'2`rUaD9T4._?ZQD!p)oD%^n$!jh5UQSc..HAm.5Bnjh:YQibH5BdrX'>.A*HLKD/nMleAoTE&d%,s0Wip8B?kB:i?(Z6j96_"<cJI_?]u,EA\IGD0`0M2-0WdltR%7DM=ndh0ggKuPob-7\Gcdn8.[jk6%d=c;#X+d\0A4Z'\g@CW*Z%gR<Sl0X%',Dk*GOMAf.`LS_$_h=Ye7Q*HV'UN8du1Sg&/k8Ggd%a@$ceZ6e#cUn=G3m55":9k4(p5)]b)`;/P8&o."b4aMIj.6MG%,^-D[_`j0;))b1#_-/Z$#VW?Pj$hNbWc=P]9#D":GgOU;9!<Hg!.EE=e0ftKG^C;'%^7Q(1T[i@lUk(jDcK_aU0ULPZOb%]Zr:c.%W7,\Ca^^bL\cZSMZ'.@dW>RUgOYk3A&*mO<Y2h8`^B<%m,KDkLm5n_3RH`%hJIPN%46)iX#HUSk$,2rG\ForMdXef$`bHBpeMs4R%R$m%jq\d<[8mEWlG;fa!2Zr?:4c<U-]>\JIJ2Db0![`Z^W27@:8HYXROZ#bKXdm2DlGWsYf6-S_du4g%$:m65ElH;#L=nSOlPNsa%PF7rY*<fp#EGYbpKq&1q*U*cSI7f9l_be0_Fhf8562&"U&b?m9oYEHQ$joI>aY7X^i'RaBcD]5S=V\mO$gY0l$F4u\3:J!L_J-!s%^cc&K-We+V4MqAKI5:!'-m7a06K<sTh2$'i)[Mid3!UZVineXl)rp^m-aD6biUWJZjdQY$!ma-$Tada]&r'_)5TP[l.;5)Ef$a/2%+;>=F8F?b@>$6Du1#0>8o.0\P.tC(B(8%SSgJe7!S[@!kSBV?H&!EeIhf&/0e@Pb"g(%GSAsM",UTbtD0;S\oFW/ROpGP<UMB]j@%&u>U;HiiI$)lPDm#?>6>:<_G+*:r*:a^Y2cRGK:T(@]OD^rRGuAA)!TK5`VHWL72N*]X<pPFf<pk1+44jV3C1d9=d:Vm]'+dbB(I%lKam]4Q^e*`PZ5j\W(Md@b$2"J@`%683s6+PeA,'\4j0s?I-d)4<PZ"'s%D`K=@6A2S!\di"0oO^a=q^jcn"=o*d'\>gs)c^8\3G%%dG5=Ah_o."a+[Il;d._6*j$C)0)$;d+b@/]%qL*VcsC+]&A$AAg4k8KKeL>5W>KF`Jb:DMV_n!H^OnW,e[H=TWSS^W35gKET;e!%nBNc["Qq[!U90blbi^GV>\E,,(V[KkC*NM#!*(aKF/2h?]ouu-"q8h@);:`=2jU/())*Rn):Xp;#?>>c@pYi;lFN0i<X/&.RI?d&%b_W]6N\Nb?DNTalD'9#AcCiIZ]Jn=9,LD!9_KDTcRLUsjUpoU[p)\6DBX`?[)??d@Pg&`o>J06-?=?#!GhmfHGSdP]a.'YZI]$!N%E@eK$%Z/`/FB%m"U.,\I5'r9<4KjU"\EB]-E:lVV(+mk9ZQ>"NgW5TD;;N@Lb=rks2e(amBo8bi2Q$\KF6p=N)0K",4$>\g831!T%*s[4E]L^rqIn;Ld#E88UTV<f<EAnIZ<WS"9a+QRpP^NdA&+ccnf;DQcgh.bPhnrF:LD\=]+O6H(fEmH3\Mfm/_6P4!1'6b6\fG=h%9HCf7gO5od5i&!re!^06P8PE&<&qE\'0D-8cE*;'EGj"_oI`rZ$FfJr",P9.e+>US8%!gR_W>DrR8G%f"jDqPmc$26R]X@3DB3lT%3+C.jV<K_gBFdcLmm3u)Z[R#BU`\t\`st5kWF>H>4TNJ`HKO^J&6D2Z*tBD35]fh\+IEd#'J^+@G`,7o8mPp4?J/hYmm.*ESk6bA%Zr-@Xg`VF)*WJm:'9Y3*/FCr6QVEu%bjiIUK2tnj_ug\54ns(<0gOkdU;M:&0u.NPJ^/,?4le2be]ls1]K]2uoA@[6O1,gnhHDWf%Itr/)?pPqpiSFU9_kE`$$Nn_lAsVU[+Lk&(/?H1+J+bF0-9XS0:$Hs62QuU!^1.f4CAIj"M]"G2NJ#e/g1(sabG!+9WQ"rK,Kf:5%^o4cmS8gD@))h`hVB=[(cnmTbRqeF=.fjf+B^'-]lOh^14[Ec,m*2Y2rG]A1_K]g8L+-=(&<.RIbW]kM.l6`%i.YD&$DRs7H7?2Z%fo_Cuk3Ij.rZ.ld\`[M'7i[K"FLdIZob\(sbosFab*OOtd)R'<g[,8IR1%Vo-/AmMH=c+KN7m(jH=N9f+-(=r]tO]Iel8KVgn(b&%KXqn*io3=Jd.kG/RXjQQ73h/p]-BAqU6s"u^?@K"h$=r*i:SZ!=kH9lW(5kX?qKfXm8AI]!OV@Pl6gZ^&>L&<CX0Q/-EY0s:Tisk%bCb!uKO,D5Pk?5r&HkO%B;"cm_6J9/`082_@o0e^!`/-)KltRo-(g1tH9n'^XarG&+09Y)\odhcV#9;6L_o_?g%\s83rWZrG0]\?%C_P;_$i4iRqU)M3Nq'Id2\/e7IBg<L0_kaT3O>Mkk$Hq:oj4LWh2ouKUr%5f=cI]\@D:M"_"&=*L,2*iiB)pDKisqKeer7p\&nB'%_B@`a>$\j<VL$1i3;,7q"8@b2Am?<0P(&,pr&?of%X,hn\6<m([@p6:G6h]4s6C742*o4ZDQ)t?O7M6HV8;8H1ZXup.l/]fHE4"=%BF[2M&/9Z[Skt1W]r;)o@G\mg'*'ti6QfH:DrBn7VcjAtjFn%aJBm2H-4V32Ni1%*[n7Q4TI92Iba+[hT_9q53Z^5T9o!G;gcDXL%jiEF=L]]Ik+ND6#9L3S7C634oR$SErXaJk+Z[,!s!G&3sEcbD^*.@*N]p*#]5Qb+O+l$M)FUrdncVDrNI,pHF4J]*D`-#eZ7@jT,%eW7psD'QBle`I:@<As1kG@%KGUYd`nhsc9U5Q#KjlI?\PhsLI5G]e)>Ip@BqFS3P#H$+W:n9joAIk0t=^O+a#4[2'sQVZL'r!8*@%d[IpsFntiNnUCRYEmfX~>%AI9_PrivateDataEnd